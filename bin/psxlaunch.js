// Generated by Haxe 3.4.7
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var Engine = function() {
	this.mountedPath = null;
	this.index = -1;
	this.flag_use_ramdrive = false;
};
Engine.__name__ = true;
Engine.prototype = {
	get_list_names: function() {
		var r = [];
		var _g = 0;
		var _g1 = this.list_games;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			r.push(i.name);
		}
		return r;
	}
	,get_gameName: function() {
		return this.list_games[this.index].name;
	}
	,init: function() {
		try {
			this.loadSettingsFile();
			this.scanDirectories();
			if(this.list_games.length == 0) {
				throw new js__$Boot_HaxeError("Did not find any games");
			}
			this.checkAutorun();
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				this.ERROR = e;
				return false;
			} else throw(e);
		}
		return true;
	}
	,anySavesRAM: function() {
		return this.saves_ram.length > 0;
	}
	,anySavesLOCAL: function() {
		return this.saves_local.length > 0;
	}
	,loadSettingsFile: function() {
		var ini = new hxconf_ConfigFile();
		ini.read(js_node_Fs.readFileSync(js_node_Path.join(js_node_Path.dirname(process.argv[1]),Engine.file_config),{ encoding : "utf8"}));
		var cfg = ini.getAll("settings");
		this.path_isos = js_node_Path.normalize(__map_reserved["isos"] != null ? cfg.getReserved("isos") : cfg.h["isos"]);
		this.path_mednafen = js_node_Path.normalize(__map_reserved["mednafen"] != null ? cfg.getReserved("mednafen") : cfg.h["mednafen"]);
		this.path_ramdrive = js_node_Path.normalize(__map_reserved["ramdrive"] != null ? cfg.getReserved("ramdrive") : cfg.h["ramdrive"]);
		this.path_autorun = js_node_Path.normalize(__map_reserved["autorun"] != null ? cfg.getReserved("autorun") : cfg.h["autorun"]);
		this.setting_autosave = Std.parseInt(__map_reserved["autosave"] != null ? cfg.getReserved("autosave") : cfg.h["autosave"]) == 1;
		if(!djNode_tools_FileTool.pathExists(this.path_isos)) {
			throw new js__$Boot_HaxeError("ISOPATH `" + this.path_isos + "` does not exist");
		}
		if(!djNode_tools_FileTool.pathExists(this.path_mednafen)) {
			throw new js__$Boot_HaxeError("MEDNAFEN PATH `" + this.path_mednafen + "` does not exist");
		}
		if(!djNode_tools_FileTool.pathExists(js_node_Path.join(this.path_mednafen,Engine.MEDNAFEN_EXE))) {
			throw new js__$Boot_HaxeError("Can't find \"" + Engine.MEDNAFEN_EXE + "\" in \"" + this.path_mednafen + "\"");
		}
		if(this.flag_use_ramdrive = this.path_ramdrive.length > 1) {
			djNode_tools_FileTool.createRecursiveDir(this.path_ramdrive);
		}
	}
	,scanDirectories: function() {
		this.list_games = [];
		var m3u = [];
		var l = djNode_tools_FileTool.getFileListFromDirR(this.path_isos,Engine.extensionsToSearch);
		var _g = 0;
		while(_g < l.length) {
			var i = l[_g];
			++_g;
			var entry = { name : js_node_Path.basename(i,js_node_Path.extname(i)), path : i};
			this.list_games.push(entry);
			if(djNode_tools_FileTool.getFileExt(i) == "m3u") {
				m3u.push(i);
			}
		}
		var _g1 = 0;
		while(_g1 < m3u.length) {
			var i1 = m3u[_g1];
			++_g1;
			var files = js_node_Fs.readFileSync(i1).toString().split(js_node_Os.EOL);
			var _g11 = 0;
			while(_g11 < files.length) {
				var ii = files[_g11];
				++_g11;
				var x = this.list_games.length;
				while(--x >= 0) if(this.list_games[x].name == js_node_Path.basename(ii,js_node_Path.extname(ii))) {
					this.list_games.splice(x,1);
				}
			}
		}
		this.list_games.sort(function(a,b) {
			return HxOverrides.cca(a.name.toLowerCase(),0) - HxOverrides.cca(b.name.toLowerCase(),0);
		});
	}
	,launchGame: function() {
		var g = this.list_games[this.index];
		if(this.isZIP) {
			this.mountedPath = this.mount_zip(g.path);
			var l = null;
			var _g = 0;
			var _g1 = djNode_tools_FileTool.getFileListFromDir(this.mountedPath);
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				var ext = djNode_tools_FileTool.getFileExt(f);
				if(ext == "cue") {
					l = f;
				} else if(ext == "m3u") {
					l = f;
					break;
				}
			}
			if(l == null) {
				this.ERROR = "Archive Error.";
				this.unmount(this.mountedPath);
				return false;
			}
			this.startMednafen(js_node_Path.join(this.mountedPath,l));
		} else {
			this.mountedPath = null;
			this.startMednafen(g.path);
		}
		return true;
	}
	,startMednafen: function(p) {
		var _gthis = this;
		js_node_ChildProcess.exec("START /I " + Engine.MEDNAFEN_EXE + " \"" + p + "\"",{ cwd : this.path_mednafen},function(a,b,c) {
			if(_gthis.mountedPath != null) {
				_gthis.unmount(_gthis.mountedPath);
			}
			if(_gthis.onMednafenExit != null) {
				_gthis.onMednafenExit();
			}
		});
	}
	,copySave_LocalToRam: function() {
		if(this.saves_local.length == 0) {
			return;
		}
		var numCopied = 0;
		var numTotal = this.saves_local.length;
		var _g = 0;
		var _g1 = this.saves_local;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var newsave = js_node_Path.join(this.path_ramdrive,js_node_Path.basename(i));
			if(!djNode_tools_FileTool.pathExists(newsave)) {
				djNode_tools_FileTool.copyFile(i,newsave);
				++numCopied;
			}
		}
		this.OPLOG = "Copied (" + numCopied + "/" + numTotal + ") saves to RAM";
	}
	,copySave_RamToLocal: function() {
		if(this.saves_ram.length == 0) {
			return;
		}
		var numCopied = 0;
		var numTotal = this.saves_ram.length;
		var _g = 0;
		var _g1 = this.saves_ram;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var dest;
			if(djNode_tools_FileTool.getFileExt(i) == "mcr") {
				dest = js_node_Path.join(this.path_mednafen,"sav",js_node_Path.basename(i));
			} else {
				dest = js_node_Path.join(this.path_mednafen,"mcs",js_node_Path.basename(i));
			}
			if(!(djNode_tools_FileTool.pathExists(dest) && this.filesAreSame(i,dest))) {
				djNode_tools_FileTool.copyFile(i,dest);
				++numCopied;
			}
		}
		this.OPLOG = "Copied (" + numCopied + "/" + numTotal + ") saves to LOCAL";
	}
	,deleteGameSaves_fromRam: function() {
		var c = 0;
		var _g = 0;
		var _g1 = this.saves_ram;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			js_node_Fs.unlinkSync(i);
			++c;
		}
		this.saves_ram = [];
		this.OPLOG = "Deleted (" + c + ") saves from RAM";
	}
	,deleteGameStates_fromEveryWhere: function() {
		var c = 0;
		var join = this.saves_ram.concat(this.saves_local);
		var _g = 0;
		while(_g < join.length) {
			var i = join[_g];
			++_g;
			if(new EReg("(.*\\d)$","i").match(i)) {
				js_node_Fs.unlinkSync(i);
				++c;
			}
		}
		this.OPLOG = "Deleted (" + c + ") STATES from RAM & LOCAL";
	}
	,getLocalSaves: function(i) {
		var ar = [];
		var _g = 0;
		while(_g < 2) {
			var s = js_node_Path.join(this.path_mednafen,"sav",this.list_games[i].name + ("." + _g++ + ".mcr"));
			if(djNode_tools_FileTool.pathExists(s)) {
				ar.push(s);
			}
		}
		var _g1 = 0;
		while(_g1 < 10) {
			var s1 = js_node_Path.join(this.path_mednafen,"mcs",this.list_games[i].name + (".mc" + _g1++));
			if(djNode_tools_FileTool.pathExists(s1)) {
				ar.push(s1);
			}
		}
		return ar;
	}
	,getRamSaves: function(i) {
		var ar = [];
		if(!this.flag_use_ramdrive) {
			return ar;
		}
		var _g = 0;
		while(_g < 2) {
			var s = js_node_Path.join(this.path_ramdrive,this.list_games[i].name + ("." + _g++ + ".mcr"));
			if(djNode_tools_FileTool.pathExists(s)) {
				ar.push(s);
			}
		}
		var _g1 = 0;
		while(_g1 < 10) {
			var s1 = js_node_Path.join(this.path_ramdrive,this.list_games[i].name + (".mc" + _g1++));
			if(djNode_tools_FileTool.pathExists(s1)) {
				ar.push(s1);
			}
		}
		return ar;
	}
	,prepareGame: function(i) {
		this.index = i;
		this.current = this.list_games[this.index];
		this.saves_local = this.getLocalSaves(i);
		this.saves_ram = this.getRamSaves(i);
		this.isZIP = this.current.path.indexOf(".zip") == this.current.path.length - 4;
	}
	,fixCheats: function() {
		var path_cheat_t = js_node_Path.join(this.path_mednafen,"cheats","psx.tmpcht");
		var path_cheat = js_node_Path.join(this.path_mednafen,"cheats","psx.cht");
		if(djNode_tools_FileTool.pathExists(path_cheat_t)) {
			djNode_tools_FileTool.copyFile(path_cheat_t,path_cheat);
			js_node_Fs.unlinkSync(path_cheat_t);
			this.OPLOG = "Cheat file written [OK]";
		} else {
			this.OPLOG = "No Need.";
		}
	}
	,checkAutorun: function() {
		if(this.path_autorun.length == 0) {
			return;
		}
		var exe = js_node_Path.basename(this.path_autorun);
		if(djNode_utils_ProcUtil.getTaskPIDs(exe).length == 0) {
			js_node_ChildProcess.exec("START /I " + this.path_autorun,function(a,b,c) {
			});
			this.OPLOG = "Launched \"" + exe + "\" [OK]";
		} else {
			this.OPLOG = "\"" + exe + "\" Already running";
		}
	}
	,filesAreSame: function(a,b) {
		return djNode_tools_FileTool.getFileMD5(a) == djNode_tools_FileTool.getFileMD5(b);
	}
	,mount_zip: function(p) {
		try {
			js_node_ChildProcess.execSync("" + Engine.PSIMO_EXE + " mount \"" + p + "\"");
		} catch( e ) {
		}
		var res = js_node_ChildProcess.execSync("" + Engine.PSIMO_EXE + " list \"" + p + "\"");
		var reg = new EReg(".*\\.zip (.*)","ig");
		if(reg.match(res)) {
			return reg.matched(1);
		} else {
			return null;
		}
	}
	,unmount: function(p) {
		try {
			js_node_ChildProcess.execSync("" + Engine.PSIMO_EXE + " unmount \"" + p + "\"");
		} catch( e ) {
		}
	}
	,__class__: Engine
	,__properties__: {get_gameName:"get_gameName",get_list_names:"get_list_names"}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var djNode_BaseApp = function() {
	this.argsAction = null;
	this.argsOptions = { };
	this.argsOutput = null;
	this.argsInput = [];
	this.ARGS = { inputRule : "opt", outputRule : "opt", requireAction : false, supportWildcards : true, supportStrayArgs : false, helpInput : null, helpOutput : null, Actions : [], Options : [["-o","output","","yes"]]};
	this.PROGRAM_INFO = { name : "nodeJS Application", version : "0.1"};
	this.HELP_MARGIN = 12;
	var _gthis = this;
	djNode_tools_LOG.init();
	djNode_BaseApp.TERMINAL = new djNode_Terminal();
	this.T = djNode_BaseApp.TERMINAL;
	process.once("exit",function(code) {
		djNode_tools_LOG.log("==> [EXIT] with code " + code,null,{ fileName : "BaseApp.hx", lineNumber : 105, className : "djNode.BaseApp", methodName : "new"});
		_gthis.onExit();
	});
	process.once("SIGINT",function() {
		process.exit(1);
	});
	process.once("uncaughtException",function(err) {
		djNode_tools_LOG.log("-------- !! Critical Error !! --------",4,{ fileName : "BaseApp.hx", lineNumber : 124, className : "djNode.BaseApp", methodName : "new"});
		if(js_Boot.__instanceof(err,Error)) {
			djNode_tools_LOG.log(err.message,4,{ fileName : "BaseApp.hx", lineNumber : 128, className : "djNode.BaseApp", methodName : "new"});
			_gthis.exitError(err.message);
		} else {
			djNode_tools_LOG.log(err,4,{ fileName : "BaseApp.hx", lineNumber : 132, className : "djNode.BaseApp", methodName : "new"});
			_gthis.exitError(err);
		}
	});
	try {
		this.init();
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,String) ) {
			this.printBanner(true);
			if(e == "HELP") {
				this.printHelp();
				process.exit(0);
			}
			this.exitError(e,true);
		} else throw(e);
	}
	djNode_tools_LOG.log("- Inputs : " + this.argsInput.join(", "),null,{ fileName : "BaseApp.hx", lineNumber : 150, className : "djNode.BaseApp", methodName : "new"});
	djNode_tools_LOG.log("- Output : " + this.argsOutput,null,{ fileName : "BaseApp.hx", lineNumber : 151, className : "djNode.BaseApp", methodName : "new"});
	djNode_tools_LOG.log("- Action  set : " + this.argsAction,null,{ fileName : "BaseApp.hx", lineNumber : 152, className : "djNode.BaseApp", methodName : "new"});
	djNode_tools_LOG.log("- Options set : ",null,{ fileName : "BaseApp.hx", lineNumber : 153, className : "djNode.BaseApp", methodName : "new"});
	var _g = 0;
	var _g1 = Reflect.fields(this.argsOptions);
	while(_g < _g1.length) {
		var o = _g1[_g];
		++_g;
		djNode_tools_LOG.log("\t\t\t" + o + " : " + Std.string(Reflect.getProperty(this.argsOptions,o)),null,{ fileName : "BaseApp.hx", lineNumber : 155, className : "djNode.BaseApp", methodName : "new"});
	}
	djNode_tools_LOG.log("-------------",null,{ fileName : "BaseApp.hx", lineNumber : 157, className : "djNode.BaseApp", methodName : "new"});
	this.onStart();
};
djNode_BaseApp.__name__ = true;
djNode_BaseApp.prototype = {
	init: function() {
		process.stdout.write("\x1B[0m");
		var P = this.PROGRAM_INFO;
		var A = this.ARGS;
		djNode_tools_LOG.log("Creating Application [ " + P.name + " ,v" + P.version + " ]",null,{ fileName : "BaseApp.hx", lineNumber : 178, className : "djNode.BaseApp", methodName : "init"});
		var cc = 0;
		var $arguments = process.argv.slice(2);
		var arg;
		while(true) {
			arg = $arguments[cc++];
			if(!(arg != null)) {
				break;
			}
			if(arg.charAt(0) == "-") {
				if(arg.toLowerCase().indexOf("-help") == 0) {
					throw new js__$Boot_HaxeError("HELP");
				}
				var o = this.getArgOption(arg);
				if(o == null) {
					throw new js__$Boot_HaxeError("Illegal argument [" + arg + "]");
				}
				if(o[3] != null) {
					var nextArg = $arguments[cc++];
					if(nextArg == null || this.getArgOption(nextArg) != null) {
						throw new js__$Boot_HaxeError("Argument [" + arg + "] requires a parameter");
					}
					this.argsOptions[HxOverrides.substr(o[0],1,null)] = nextArg;
					if(o[0] == "-o") {
						this.argsOutput = nextArg;
					}
				} else {
					this.argsOptions[HxOverrides.substr(o[0],1,null)] = true;
				}
				continue;
			}
			var a = this.getArgAction(arg);
			if(a != null) {
				if(this.argsAction != null) {
					throw new js__$Boot_HaxeError("You can only set one <action>");
				}
				this.argsAction = a[0];
				continue;
			}
			this.argsInput.push(arg);
		}
		var _g = 0;
		var _g1 = this.argsInput;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.indexOf("*") >= 0) {
				if(this.argsInput.length > 1) {
					throw new js__$Boot_HaxeError("Multiple Inputs with wildcards are not supported");
				}
				this.argsInput = djNode_tools_FileTool.getFileListFromWildcard(i);
				if(this.argsInput.length == 0) {
					throw new js__$Boot_HaxeError("Wildcard `" + i + "` returned 0 files");
				}
				break;
			}
		}
		if(this.argsAction == null && this.argsInput.length > 0) {
			var act = this.getArgAction(null,HxOverrides.substr(js_node_Path.extname(this.argsInput[0].toLowerCase()),1,null));
			if(act != null) {
				this.argsAction = act[0];
			}
		}
		if(this.argsInput.length == 0 && ["yes","multi"].indexOf(A.inputRule) >= 0) {
			throw new js__$Boot_HaxeError("Input is required");
		}
		if(this.argsOutput == null && A.outputRule == "yes") {
			throw new js__$Boot_HaxeError("Output is required");
		}
		if(A.requireAction && this.argsAction == null) {
			throw new js__$Boot_HaxeError("Setting an action is required");
		}
		var _g2 = 0;
		var _g11 = this.ARGS.Options;
		while(_g2 < _g11.length) {
			var o1 = _g11[_g2];
			++_g2;
			if(o1[3] == null) {
				var id = HxOverrides.substr(o1[0],1,null);
				if(!Object.prototype.hasOwnProperty.call(this.argsOptions,id)) {
					this.argsOptions[id] = false;
				}
			}
		}
	}
	,onStart: function() {
	}
	,onExit: function() {
		djNode_tools_LOG.end();
		process.stdout.write("\x1B[0m");
		this.T.cursorShow();
	}
	,printHelp: function() {
		var _gthis = this;
		var sp = function(s) {
			return StringTools.lpad(""," ",s);
		};
		var A = this.ARGS;
		var P = this.PROGRAM_INFO;
		var __getInfoRule = function(rule) {
			if(rule == "opt") {
				return "is optional.";
			} else {
				return "is required.";
			}
		};
		var __fixDescFormat = function(s1) {
			if(s1 != null && s1.length > 0) {
				var _this_r = new RegExp("(\n)","g".split("u").join(""));
				var by = "\n " + sp(_gthis.HELP_MARGIN);
				return s1.replace(_this_r,by);
			} else {
				return "...";
			}
		};
		if(A.helpInput != null) {
			var _this_r1 = new RegExp("(\n)","g".split("u").join(""));
			A.helpInput = "~gray~\t " + A.helpInput.replace(_this_r1,"\n\t ");
		}
		if(A.helpOutput != null) {
			var _this_r2 = new RegExp("(\n)","g".split("u").join(""));
			A.helpOutput = "~gray~\t " + A.helpOutput.replace(_this_r2,"\n\t ");
		}
		A.Options.shift();
		var _g = 0;
		var _g1 = A.Actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a[2] = __fixDescFormat(a[2]);
		}
		var _g2 = 0;
		var _g11 = A.Options;
		while(_g2 < _g11.length) {
			var a1 = _g11[_g2];
			++_g2;
			a1[2] = __fixDescFormat(a1[2]);
		}
		var str = this.T.sprintf(" ~green~Program Usage: ~white~ \n");
		process.stdout.write(str);
		if(P.executable == null) {
			P.executable = "app.js";
		}
		var s2 = "   " + P.executable + " ";
		if(A.Actions.length > 0) {
			s2 += "<action> ";
		}
		if(A.Options.length > 0) {
			s2 += "-<option> <parameter> ...\n      ";
		}
		if(A.inputRule != "no") {
			s2 += "<input> ";
			if(A.inputRule == "multi") {
				s2 += "... ";
			}
		}
		if(A.outputRule != "no") {
			s2 += "-o <output> ";
		}
		var _this = this.T;
		process.stdout.write(s2);
		process.stdout.write("\n");
		var str1 = _this.sprintf("~darkgray~ ~line2~");
		process.stdout.write(str1);
		if(A.inputRule != "no") {
			var str2 = this.T.sprintf("~yellow~ <input> ~!~");
			process.stdout.write(str2);
			var str3 = __getInfoRule(A.inputRule);
			process.stdout.write(str3);
			if(A.inputRule == "multi") {
				var str4 = this.T.sprintf("~darkcyan~ <multiple supported>");
				process.stdout.write(str4);
			}
			process.stdout.write("\n");
			if(A.helpInput != null) {
				var str5 = this.T.sprintf(A.helpInput);
				process.stdout.write(str5);
				process.stdout.write("\n");
			}
		}
		if(A.outputRule != "no") {
			var str6 = this.T.sprintf("~yellow~ <output> ~!~");
			process.stdout.write(str6);
			var str7 = __getInfoRule(A.outputRule);
			process.stdout.write(str7);
			process.stdout.write("\n");
			if(A.helpOutput != null) {
				var str8 = this.T.sprintf(A.helpOutput);
				process.stdout.write(str8);
				process.stdout.write("\n");
			}
		}
		var str9 = this.T.sprintf(" ~darkgray~~line2~");
		process.stdout.write(str9);
		process.stdout.write("\x1B[0m");
		if(A.Actions.length > 0) {
			var str10 = this.T.sprintf(" ~magenta~<actions> ~!fg~");
			process.stdout.write(str10);
			var str11 = this.T.sprintf("~darkmagenta~you can set one action at a time ~!~\n");
			process.stdout.write(str11);
			var _g3 = 0;
			var _g12 = A.Actions;
			while(_g3 < _g12.length) {
				var i = _g12[_g3];
				++_g3;
				var str12 = this.T.sprintf("~white~ " + i[0] + sp(this.HELP_MARGIN - i[0].length) + ("~magenta~" + i[1]));
				process.stdout.write(str12);
				if(i[3] != null) {
					var str13 = this.T.sprintf("~darkgray~ ~ auto ext:[" + i[3] + "]");
					process.stdout.write(str13);
				}
				process.stdout.write("\n");
				var str14 = sp(this.HELP_MARGIN);
				process.stdout.write(str14);
				var str15 = this.T.sprintf("~gray~ " + i[2] + "\n");
				process.stdout.write(str15);
				process.stdout.write("\x1B[0m");
			}
		}
		if(A.Options.length > 0) {
			var str16 = this.T.sprintf(" ~cyan~<options> ~!fg~");
			process.stdout.write(str16);
			var str17 = this.T.sprintf("~darkcyan~you can set many options~!~\n");
			process.stdout.write(str17);
			var _g4 = 0;
			var _g13 = A.Options;
			while(_g4 < _g13.length) {
				var i1 = _g13[_g4];
				++_g4;
				var str18 = this.T.sprintf("~white~ " + i1[0] + sp(this.HELP_MARGIN - i1[0].length) + ("~cyan~" + i1[1]));
				process.stdout.write(str18);
				if(i1[3] != null) {
					var str19 = this.T.sprintf("~darkgray~ [requires parameter] ");
					process.stdout.write(str19);
				}
				process.stdout.write("\n");
				var str20 = sp(this.HELP_MARGIN);
				process.stdout.write(str20);
				var str21 = this.T.sprintf("~gray~ " + i1[2] + "\n");
				process.stdout.write(str21);
				process.stdout.write("\x1B[0m");
			}
		}
	}
	,printBanner: function(longer) {
		if(longer == null) {
			longer = false;
		}
		var P = this.PROGRAM_INFO;
		process.stdout.write("\n");
		var str = this.T.sprintf("== ~" + "white" + "~~b~" + P.name + " v" + P.version + "~!~\n");
		process.stdout.write(str);
		if(longer) {
			if(P.desc != null) {
				process.stdout.write(" - " + P.desc + "\n");
			}
			if(P.author != null || P.contact != null) {
				process.stdout.write(" - " + P.author + " , " + P.contact + "\n");
			}
		}
		var str1 = this.T.sprintf(" ~" + "darkgray" + "~~line~~!~");
		process.stdout.write(str1);
	}
	,exitError: function(text,showHelp) {
		if(showHelp == null) {
			showHelp = false;
		}
		var str = this.T.sprintf("\n~bg_darkred~~white~ ERROR ~!~ ~red~" + text + "\n");
		process.stdout.write(str);
		if(showHelp) {
			var str1 = this.T.sprintf("~darkgray~ ~line2~~yellow~ -help ~!~ for usage info\n");
			process.stdout.write(str1);
		}
		process.exit(1);
	}
	,getArgOption: function(tag) {
		var _g = 0;
		var _g1 = this.ARGS.Options;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o[0] == tag) {
				return o;
			}
		}
		return null;
	}
	,getArgAction: function(tag,ext) {
		var _g = 0;
		var _g1 = this.ARGS.Actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(tag != null && a[0] == tag) {
				return a;
			}
			if(ext != null && a[3] != null) {
				if(a[3].split(",").indexOf(ext.toLowerCase()) >= 0) {
					return a;
				}
			}
		}
		return null;
	}
	,__class__: djNode_BaseApp
};
var Main = function() {
	djNode_BaseApp.call(this);
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
Main.__super__ = djNode_BaseApp;
Main.prototype = $extend(djNode_BaseApp.prototype,{
	exit_error: function(err) {
		var _this = djTui_Styles.win;
		djTui_win_MessageBox.create("ERROR : \n" + err,0,function(a) {
			process.exit(0);
		},40,__map_reserved["pop_red"] != null ? _this.getReserved("pop_red") : _this.h["pop_red"]);
	}
	,init: function() {
		this.T.pageDown();
		this.PROGRAM_INFO = { name : "PSX launcher - (custom)", version : "0.3", author : "JohnDimi"};
		djNode_BaseApp.prototype.init.call(this);
	}
	,onStart: function() {
		var _gthis = this;
		this.T.pageDown();
		this.T.clearScreen();
		this.T.cursorHide();
		djTui_WM.create(new djTui_adaptors_djNode_InputObj(),new djTui_adaptors_djNode_TerminalObj(),Main.WIDTH,Main.HEIGHT);
		djTui_WM.set_TAB_behavior("WINDOW","exit");
		var _this = djTui_Styles.win;
		djTui_WM.global_style_win = __map_reserved["black.1"] != null ? _this.getReserved("black.1") : _this.h["black.1"];
		this.engine = new Engine();
		if(!this.engine.init()) {
			this.exit_error(this.engine.ERROR);
			return;
		}
		this.engine.onMednafenExit = $bind(this,this.onGameExit);
		this.winList = new djTui_Window("main",40,19);
		this.winList.addStack(new djTui_el_Label("Available Games").setColor(null,"green"));
		this.winList.addSeparator();
		var l = new djTui_el_VList(null,this.winList.get_inWidth(),this.winList.get_inHeight() - 2);
		l.setData(this.engine.get_list_names());
		l.onSelect = $bind(this,this.openOptionsForGame);
		l.flag_letter_jump = true;
		this.winList.addStack(l);
		this.winList.pos(3,2);
		this.winList.open(true);
		this.winList.listen(function(a,b) {
			if(a == "escape") {
				djTui_WM.popupConfirm(function() {
					process.exit(0);
				},"QUIT");
			}
		});
		this.create_header_footer();
		this.create_info();
		this.winOptBtns = [];
		var _this1 = djTui_Styles.win;
		this.winOptions = new djTui_Window("options",20,5,__map_reserved["red.1"] != null ? _this1.getReserved("red.1") : _this1.h["red.1"]);
		this.winOptions.isOptionsPopup();
		this.winOptions.addStack(new djTui_el_Button("b1","Launch"));
		this.winOptions.addSeparator();
		if(this.engine.flag_use_ramdrive) {
			this.winOptions.size(this.winOptions.width,this.winOptions.height + 5);
			this.winOptBtns.push(this.winOptions.addStack(new djTui_el_Button("b2","Local --> RAM")));
			this.winOptBtns.push(this.winOptions.addStack(new djTui_el_Button("b3","RAM --> Local")));
			this.winOptBtns.push(this.winOptions.addStack(new djTui_el_Button("b4","Delete all RAM").extra("?Delete all Saves from RAM?")));
			this.winOptBtns.push(this.winOptions.addStack(new djTui_el_Button("b5","Delete all States").extra("?Delete States from RAM + LOCAL?")));
			this.winOptions.addSeparator();
		}
		this.winOptions.addStack(new djTui_el_Button("","Close").extra("close"));
		this.winOptions.posNext(this.winList,2).move(0,2);
		this.winOptions.listen($bind(this,this.listen_Options));
		var w2 = new djTui_win_MenuBar("utility",1,0);
		w2.setPanelStyle("gray","darkgray",-1);
		w2.setItemStyle("left",0,1,1,1,1);
		w2.setItems(["FixCheats","About"]);
		w2.onSelect = function(ind) {
			switch(ind) {
			case 0:
				_gthis.engine.fixCheats();
				_gthis.openLogStatus(_gthis.engine.OPLOG);
				break;
			case 1:
				djTui_win_MessageBox.create("Created by JohnDimi, using Haxe and a bunch of custom libraries",0,null,40,null,true);
				break;
			default:
			}
		};
		djTui_WM.A.screen(w2,"right","top",1);
		w2.open();
		this.winLog = new djTui_Window("winlog",30,3);
		this.winLog.padding(0,0);
		this.winLog.modifyStyle({ text : "white", bg : "darkgray", borderStyle : 1});
		this.winLog.flag_focusable = false;
		this.winLog.addStack(new djTui_el_Label(null,this.winLog.get_inWidth()).setSID("log"));
		djTui_WM.A.down(this.winLog,this.winOptions,0,2);
	}
	,openOptionsForGame: function(i) {
		this.engine.prepareGame(i);
		if(this.engine.flag_use_ramdrive) {
			this.winOptBtns[0].set_disabled(!this.engine.anySavesLOCAL());
			this.winOptBtns[1].set_disabled(!this.engine.anySavesRAM());
			this.winOptBtns[2].set_disabled(this.winOptBtns[1].disabled);
			this.winOptBtns[3].set_disabled(this.winOptBtns[0].disabled && this.winOptBtns[1].disabled);
		}
		this.winOptions.open(true);
	}
	,listen_Options: function(a,b) {
		var _gthis = this;
		var opEnd = function() {
			_gthis.openOptionsForGame(_gthis.engine.index);
			if(_gthis.engine.OPLOG != null) {
				_gthis.openLogStatus(_gthis.engine.OPLOG);
			}
		};
		if(a == "close") {
			this.winInfo.close();
			this.winList.focus();
		} else if(a == "open") {
			this.openGameInfo();
		} else if(a == "fire") {
			switch(b.SID) {
			case "b1":
				this.winOptions.close();
				if(!this.engine.launchGame()) {
					this.openLogStatus(this.engine.ERROR);
					return;
				}
				this.openGameLaunchWindow();
				break;
			case "b2":
				this.engine.copySave_LocalToRam();
				opEnd();
				break;
			case "b3":
				this.engine.copySave_RamToLocal();
				opEnd();
				break;
			case "b4":
				this.engine.deleteGameSaves_fromRam();
				opEnd();
				break;
			case "b5":
				this.engine.deleteGameStates_fromEveryWhere();
				opEnd();
				break;
			default:
			}
		}
	}
	,openGameLaunchWindow: function() {
		this.winList.close();
		var _this = djTui_Styles.win;
		this.pop = djTui_win_MessageBox.create("Now Playing:\n" + this.engine.get_gameName(),3,null,40,__map_reserved["gray.1"] != null ? _this.getReserved("gray.1") : _this.h["gray.1"]);
	}
	,onGameExit: function() {
		if(this.pop != null) {
			this.pop.close();
		}
		this.pop = null;
		this.winList.open(true);
	}
	,create_header_footer: function() {
		var head = new djTui_Window(null,-1,1);
		head.flag_focusable = false;
		head.modifyStyle({ bg : "darkcyan", text : "black", borderStyle : 0, borderColor : { fg : "darkblue"}});
		head.padding(2,0);
		head.addStack(new djTui_el_Label(this.PROGRAM_INFO.name + " v" + this.PROGRAM_INFO.version));
		var foot = new djTui_Window(null,-1,1);
		foot.flag_focusable = false;
		foot.padding(0);
		foot.modifyStyle({ bg : "gray", text : "darkblue", borderStyle : 0});
		foot.addStack(new djTui_el_Label("[TAB] = FOCUS  |  [↑↓] = MOVE   |  [ENTER] = SELECT  |  [ESC] = BACK",foot.get_inWidth(),"center"));
		foot.pos(0,djTui_WM.height - foot.height);
		djTui_WM.add(head);
		djTui_WM.add(foot);
	}
	,create_info: function() {
		this.inf_name = new djTui_el_Label();
		this.inf_name.setColor(null,"yellow");
		this.inf_name.scroll(125);
		var _this = djTui_Styles.win;
		this.winInfo = new djTui_Window(null,-1,2,__map_reserved["black.1"] != null ? _this.getReserved("black.1") : _this.h["black.1"]);
		this.winInfo.padding(2,0);
		this.winInfo.set_borderStyle(0);
		this.winInfo.addStackInline([new djTui_el_Label("Game Name : "),this.inf_name]);
		this.winInfo.flag_focusable = false;
		djTui_WM.A.down(this.winInfo,this.winList);
		this.inf_RAM = new djTui_el_Button("","   ",1);
		this.inf_LOCAL = new djTui_el_Button("","   ",1);
		this.inf_ZIP = new djTui_el_Label("").setColor(null,"cyan");
		this.winInfo.addStackInline([new djTui_el_Label("Save on RAM"),this.inf_RAM,new djTui_el_Label("Save Local"),this.inf_LOCAL,this.inf_ZIP]);
	}
	,openLogStatus: function(s) {
		var _gthis = this;
		this.winLog.getElIndex(1).set_text(s);
		this.winLog.open();
		if(this.winTimer != null) {
			this.winTimer.stop();
			this.winTimer = null;
		}
		this.winTimer = haxe_Timer.delay(function() {
			_gthis.winLog.close();
		},Main.STATUS_POPUP_TIME);
	}
	,openGameInfo: function() {
		this.inf_name.set_text(this.engine.current.name + "     ");
		if(this.engine.saves_ram.length > 0) {
			this.inf_RAM.set_text("YES");
			this.inf_RAM.colorIdle("green");
		} else {
			this.inf_RAM.set_text("NO");
			this.inf_RAM.colorIdle("red");
		}
		if(this.engine.saves_local.length > 0) {
			this.inf_LOCAL.set_text("YES");
			this.inf_LOCAL.colorIdle("green");
		} else {
			this.inf_LOCAL.set_text("NO");
			this.inf_LOCAL.colorIdle("red");
		}
		if(this.engine.isZIP) {
			this.inf_ZIP.set_text("(zipped)");
		} else {
			this.inf_ZIP.set_text("");
		}
		this.winInfo.open();
	}
	,onExit: function() {
		this.T.move(0,djTui_WM.height);
		djNode_BaseApp.prototype.onExit.call(this);
	}
	,__class__: Main
});
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s += c;
	return s;
};
var djNode_KeycodeID = { __ename__ : true, __constructs__ : ["up","down","left","right","home","insert","delete","end","pageup","pagedown","backsp","tab","enter","space","esc","ctrlC","acute","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","other"] };
djNode_KeycodeID.up = ["up",0];
djNode_KeycodeID.up.toString = $estr;
djNode_KeycodeID.up.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.down = ["down",1];
djNode_KeycodeID.down.toString = $estr;
djNode_KeycodeID.down.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.left = ["left",2];
djNode_KeycodeID.left.toString = $estr;
djNode_KeycodeID.left.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.right = ["right",3];
djNode_KeycodeID.right.toString = $estr;
djNode_KeycodeID.right.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.home = ["home",4];
djNode_KeycodeID.home.toString = $estr;
djNode_KeycodeID.home.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.insert = ["insert",5];
djNode_KeycodeID.insert.toString = $estr;
djNode_KeycodeID.insert.__enum__ = djNode_KeycodeID;
djNode_KeycodeID["delete"] = ["delete",6];
djNode_KeycodeID["delete"].toString = $estr;
djNode_KeycodeID["delete"].__enum__ = djNode_KeycodeID;
djNode_KeycodeID.end = ["end",7];
djNode_KeycodeID.end.toString = $estr;
djNode_KeycodeID.end.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.pageup = ["pageup",8];
djNode_KeycodeID.pageup.toString = $estr;
djNode_KeycodeID.pageup.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.pagedown = ["pagedown",9];
djNode_KeycodeID.pagedown.toString = $estr;
djNode_KeycodeID.pagedown.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.backsp = ["backsp",10];
djNode_KeycodeID.backsp.toString = $estr;
djNode_KeycodeID.backsp.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.tab = ["tab",11];
djNode_KeycodeID.tab.toString = $estr;
djNode_KeycodeID.tab.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.enter = ["enter",12];
djNode_KeycodeID.enter.toString = $estr;
djNode_KeycodeID.enter.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.space = ["space",13];
djNode_KeycodeID.space.toString = $estr;
djNode_KeycodeID.space.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.esc = ["esc",14];
djNode_KeycodeID.esc.toString = $estr;
djNode_KeycodeID.esc.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.ctrlC = ["ctrlC",15];
djNode_KeycodeID.ctrlC.toString = $estr;
djNode_KeycodeID.ctrlC.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.acute = ["acute",16];
djNode_KeycodeID.acute.toString = $estr;
djNode_KeycodeID.acute.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F1 = ["F1",17];
djNode_KeycodeID.F1.toString = $estr;
djNode_KeycodeID.F1.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F2 = ["F2",18];
djNode_KeycodeID.F2.toString = $estr;
djNode_KeycodeID.F2.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F3 = ["F3",19];
djNode_KeycodeID.F3.toString = $estr;
djNode_KeycodeID.F3.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F4 = ["F4",20];
djNode_KeycodeID.F4.toString = $estr;
djNode_KeycodeID.F4.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F5 = ["F5",21];
djNode_KeycodeID.F5.toString = $estr;
djNode_KeycodeID.F5.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F6 = ["F6",22];
djNode_KeycodeID.F6.toString = $estr;
djNode_KeycodeID.F6.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F7 = ["F7",23];
djNode_KeycodeID.F7.toString = $estr;
djNode_KeycodeID.F7.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F8 = ["F8",24];
djNode_KeycodeID.F8.toString = $estr;
djNode_KeycodeID.F8.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F9 = ["F9",25];
djNode_KeycodeID.F9.toString = $estr;
djNode_KeycodeID.F9.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F10 = ["F10",26];
djNode_KeycodeID.F10.toString = $estr;
djNode_KeycodeID.F10.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F11 = ["F11",27];
djNode_KeycodeID.F11.toString = $estr;
djNode_KeycodeID.F11.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F12 = ["F12",28];
djNode_KeycodeID.F12.toString = $estr;
djNode_KeycodeID.F12.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.other = ["other",29];
djNode_KeycodeID.other.toString = $estr;
djNode_KeycodeID.other.__enum__ = djNode_KeycodeID;
var djNode_Keycode = function() { };
djNode_Keycode.__name__ = true;
djNode_Keycode.toKeyCodeID = function(key) {
	if(HxOverrides.cca(key,1) == null) {
		switch(HxOverrides.cca(key,0)) {
		case 3:
			return djNode_KeycodeID.ctrlC;
		case 8:
			return djNode_KeycodeID.backsp;
		case 9:
			return djNode_KeycodeID.tab;
		case 13:
			return djNode_KeycodeID.enter;
		case 27:
			return djNode_KeycodeID.esc;
		case 32:
			return djNode_KeycodeID.space;
		case 96:
			return djNode_KeycodeID.acute;
		case 127:
			return djNode_KeycodeID.backsp;
		}
	} else if(HxOverrides.cca(key,0) == 27 && HxOverrides.cca(key,1) == 91) {
		switch(HxOverrides.cca(key,2)) {
		case 49:
			switch(HxOverrides.cca(key,3)) {
			case 55:
				return djNode_KeycodeID.F6;
			case 56:
				return djNode_KeycodeID.F7;
			case 57:
				return djNode_KeycodeID.F8;
			case 126:
				return djNode_KeycodeID.home;
			}
			break;
		case 50:
			switch(HxOverrides.cca(key,3)) {
			case 48:
				return djNode_KeycodeID.F9;
			case 49:
				return djNode_KeycodeID.F10;
			case 51:
				return djNode_KeycodeID.F11;
			case 52:
				return djNode_KeycodeID.F12;
			case 126:
				return djNode_KeycodeID.insert;
			}
			break;
		case 51:
			return djNode_KeycodeID["delete"];
		case 52:
			return djNode_KeycodeID.end;
		case 53:
			return djNode_KeycodeID.pageup;
		case 54:
			return djNode_KeycodeID.pagedown;
		case 65:
			return djNode_KeycodeID.up;
		case 66:
			return djNode_KeycodeID.down;
		case 67:
			return djNode_KeycodeID.right;
		case 68:
			return djNode_KeycodeID.left;
		case 91:
			switch(HxOverrides.cca(key,3)) {
			case 65:
				return djNode_KeycodeID.F1;
			case 66:
				return djNode_KeycodeID.F2;
			case 67:
				return djNode_KeycodeID.F3;
			case 68:
				return djNode_KeycodeID.F4;
			case 69:
				return djNode_KeycodeID.F5;
			}
			break;
		}
	}
	return null;
};
var djNode_Keyboard = function() { };
djNode_Keyboard.__name__ = true;
djNode_Keyboard.startCapture = function(realtime,callback) {
	if(realtime == null) {
		realtime = true;
	}
	djNode_Keyboard.stop();
	if(callback != null) {
		djNode_Keyboard.onData = callback;
	}
	djNode_Keyboard.stdin = process.stdin;
	djNode_Keyboard.stdin.setRawMode(realtime);
	djNode_Keyboard.stdin.setEncoding("utf8");
	djNode_Keyboard.stdin.on("data",djNode_Keyboard.onKeyData);
	djNode_Keyboard.stdin.resume();
};
djNode_Keyboard.onKeyData = function(data) {
	if(djNode_Keyboard.FLAG_CAN_BREAK && data == djNode_Keycode.CTRLC) {
		djNode_Keyboard.stop();
		if(djNode_Keyboard.onBreak != null) {
			djNode_Keyboard.onBreak();
		}
		djNode_Keyboard.onBreak = null;
		return;
	}
	if(djNode_Keyboard.onData != null) {
		djNode_Keyboard.onData(data);
	}
};
djNode_Keyboard.stop = function() {
	if(djNode_Keyboard.stdin == null) {
		return;
	}
	djNode_Keyboard.stdin.pause();
	djNode_Keyboard.stdin.setRawMode(false);
	djNode_Keyboard.stdin.removeAllListeners("data");
};
var djNode_Terminal = function() {
	this.colormap_fg = new haxe_ds_StringMap();
	var _this = this.colormap_fg;
	if(__map_reserved["darkgray"] != null) {
		_this.setReserved("darkgray","\x1B[90m");
	} else {
		_this.h["darkgray"] = "\x1B[90m";
	}
	var _this1 = this.colormap_fg;
	if(__map_reserved["red"] != null) {
		_this1.setReserved("red","\x1B[91m");
	} else {
		_this1.h["red"] = "\x1B[91m";
	}
	var _this2 = this.colormap_fg;
	if(__map_reserved["green"] != null) {
		_this2.setReserved("green","\x1B[92m");
	} else {
		_this2.h["green"] = "\x1B[92m";
	}
	var _this3 = this.colormap_fg;
	if(__map_reserved["yellow"] != null) {
		_this3.setReserved("yellow","\x1B[93m");
	} else {
		_this3.h["yellow"] = "\x1B[93m";
	}
	var _this4 = this.colormap_fg;
	if(__map_reserved["blue"] != null) {
		_this4.setReserved("blue","\x1B[94m");
	} else {
		_this4.h["blue"] = "\x1B[94m";
	}
	var _this5 = this.colormap_fg;
	if(__map_reserved["magenta"] != null) {
		_this5.setReserved("magenta","\x1B[95m");
	} else {
		_this5.h["magenta"] = "\x1B[95m";
	}
	var _this6 = this.colormap_fg;
	if(__map_reserved["cyan"] != null) {
		_this6.setReserved("cyan","\x1B[96m");
	} else {
		_this6.h["cyan"] = "\x1B[96m";
	}
	var _this7 = this.colormap_fg;
	if(__map_reserved["white"] != null) {
		_this7.setReserved("white","\x1B[97m");
	} else {
		_this7.h["white"] = "\x1B[97m";
	}
	var _this8 = this.colormap_fg;
	if(__map_reserved["black"] != null) {
		_this8.setReserved("black","\x1B[30m");
	} else {
		_this8.h["black"] = "\x1B[30m";
	}
	var _this9 = this.colormap_fg;
	if(__map_reserved["darkred"] != null) {
		_this9.setReserved("darkred","\x1B[31m");
	} else {
		_this9.h["darkred"] = "\x1B[31m";
	}
	var _this10 = this.colormap_fg;
	if(__map_reserved["darkgreen"] != null) {
		_this10.setReserved("darkgreen","\x1B[32m");
	} else {
		_this10.h["darkgreen"] = "\x1B[32m";
	}
	var _this11 = this.colormap_fg;
	if(__map_reserved["darkyellow"] != null) {
		_this11.setReserved("darkyellow","\x1B[33m");
	} else {
		_this11.h["darkyellow"] = "\x1B[33m";
	}
	var _this12 = this.colormap_fg;
	if(__map_reserved["darkblue"] != null) {
		_this12.setReserved("darkblue","\x1B[34m");
	} else {
		_this12.h["darkblue"] = "\x1B[34m";
	}
	var _this13 = this.colormap_fg;
	if(__map_reserved["darkmagenta"] != null) {
		_this13.setReserved("darkmagenta","\x1B[35m");
	} else {
		_this13.h["darkmagenta"] = "\x1B[35m";
	}
	var _this14 = this.colormap_fg;
	if(__map_reserved["darkcyan"] != null) {
		_this14.setReserved("darkcyan","\x1B[36m");
	} else {
		_this14.h["darkcyan"] = "\x1B[36m";
	}
	var _this15 = this.colormap_fg;
	if(__map_reserved["gray"] != null) {
		_this15.setReserved("gray","\x1B[37m");
	} else {
		_this15.h["gray"] = "\x1B[37m";
	}
	this.colormap_bg = new haxe_ds_StringMap();
	var _this16 = this.colormap_bg;
	if(__map_reserved["darkgray"] != null) {
		_this16.setReserved("darkgray","\x1B[100m");
	} else {
		_this16.h["darkgray"] = "\x1B[100m";
	}
	var _this17 = this.colormap_bg;
	if(__map_reserved["red"] != null) {
		_this17.setReserved("red","\x1B[101m");
	} else {
		_this17.h["red"] = "\x1B[101m";
	}
	var _this18 = this.colormap_bg;
	if(__map_reserved["green"] != null) {
		_this18.setReserved("green","\x1B[102m");
	} else {
		_this18.h["green"] = "\x1B[102m";
	}
	var _this19 = this.colormap_bg;
	if(__map_reserved["yellow"] != null) {
		_this19.setReserved("yellow","\x1B[103m");
	} else {
		_this19.h["yellow"] = "\x1B[103m";
	}
	var _this20 = this.colormap_bg;
	if(__map_reserved["blue"] != null) {
		_this20.setReserved("blue","\x1B[104m");
	} else {
		_this20.h["blue"] = "\x1B[104m";
	}
	var _this21 = this.colormap_bg;
	if(__map_reserved["magenta"] != null) {
		_this21.setReserved("magenta","\x1B[105m");
	} else {
		_this21.h["magenta"] = "\x1B[105m";
	}
	var _this22 = this.colormap_bg;
	if(__map_reserved["cyan"] != null) {
		_this22.setReserved("cyan","\x1B[106m");
	} else {
		_this22.h["cyan"] = "\x1B[106m";
	}
	var _this23 = this.colormap_bg;
	if(__map_reserved["white"] != null) {
		_this23.setReserved("white","\x1B[107m");
	} else {
		_this23.h["white"] = "\x1B[107m";
	}
	var _this24 = this.colormap_bg;
	if(__map_reserved["black"] != null) {
		_this24.setReserved("black","\x1B[40m");
	} else {
		_this24.h["black"] = "\x1B[40m";
	}
	var _this25 = this.colormap_bg;
	if(__map_reserved["darkred"] != null) {
		_this25.setReserved("darkred","\x1B[41m");
	} else {
		_this25.h["darkred"] = "\x1B[41m";
	}
	var _this26 = this.colormap_bg;
	if(__map_reserved["darkgreen"] != null) {
		_this26.setReserved("darkgreen","\x1B[42m");
	} else {
		_this26.h["darkgreen"] = "\x1B[42m";
	}
	var _this27 = this.colormap_bg;
	if(__map_reserved["darkyellow"] != null) {
		_this27.setReserved("darkyellow","\x1B[43m");
	} else {
		_this27.h["darkyellow"] = "\x1B[43m";
	}
	var _this28 = this.colormap_bg;
	if(__map_reserved["darkblue"] != null) {
		_this28.setReserved("darkblue","\x1B[44m");
	} else {
		_this28.h["darkblue"] = "\x1B[44m";
	}
	var _this29 = this.colormap_bg;
	if(__map_reserved["darkmagenta"] != null) {
		_this29.setReserved("darkmagenta","\x1B[45m");
	} else {
		_this29.h["darkmagenta"] = "\x1B[45m";
	}
	var _this30 = this.colormap_bg;
	if(__map_reserved["darkcyan"] != null) {
		_this30.setReserved("darkcyan","\x1B[46m");
	} else {
		_this30.h["darkcyan"] = "\x1B[46m";
	}
	var _this31 = this.colormap_bg;
	if(__map_reserved["gray"] != null) {
		_this31.setReserved("gray","\x1B[47m");
	} else {
		_this31.h["gray"] = "\x1B[47m";
	}
};
djNode_Terminal.__name__ = true;
djNode_Terminal.prototype = {
	getWidth: function() {
		return process.stdout.columns;
	}
	,getHeight: function() {
		return process.stdout.rows;
	}
	,fg: function(col) {
		if(col == null) {
			process.stdout.write("\x1B[39m");
			return this;
		}
		var _this = this.colormap_fg;
		process.stdout.write(__map_reserved[col] != null ? _this.getReserved(col) : _this.h[col]);
		return this;
	}
	,bg: function(col) {
		if(col == null) {
			process.stdout.write("\x1B[49m");
			return this;
		}
		var _this = this.colormap_bg;
		process.stdout.write(__map_reserved[col] != null ? _this.getReserved(col) : _this.h[col]);
		return this;
	}
	,move: function(x,y) {
		process.stdout.cursorTo(x - 1,y - 1);
		return this;
	}
	,pageDown: function() {
		process.stdout.write("\x1B[s");
		process.stdout.write(StringTools.lpad("","\n",this.getHeight() + 1));
		process.stdout.write("\x1B[u");
		return this;
	}
	,clearScreen: function(type) {
		if(type == null) {
			type = 2;
		}
		if(type > 0) {
			this.move(1,1);
		}
		process.stdout.clearScreenDown();
		return this;
	}
	,cursorHide: function() {
		process.stdout.write("\x1B[?25l");
		return this;
	}
	,cursorShow: function() {
		process.stdout.write("\x1B[?25h");
		return this;
	}
	,sprintf: function(str) {
		var _gthis = this;
		return new EReg("(~\\S[^~]*~)","g").map(str,function(reg) {
			var s = HxOverrides.substr(reg.matched(0).substring(1),0,-1);
			switch(s) {
			case "!":
				return "\x1B[0m";
			case "!b":
				return "\x1B[21m";
			case "!bg":
				return "\x1B[49m";
			case "!fg":
				return "\x1B[39m";
			case "b":
				return "\x1B[1m";
			case "line":
				return StringTools.lpad("",djNode_Terminal.DEFAULT_LINE_SYMBOL,djNode_Terminal.DEFAULT_LINE_WIDTH) + "\n";
			case "line2":
				return StringTools.lpad("",djNode_Terminal.DEFAULT_LINE_SYMBOL,Math.ceil(djNode_Terminal.DEFAULT_LINE_WIDTH / 2)) + "\n";
			default:
				try {
					if(HxOverrides.substr(s,0,3) == "bg_") {
						return _gthis.colormap_bg.get(HxOverrides.substr(s,3,null));
					} else {
						return _gthis.colormap_fg.get(s);
					}
				} catch( e ) {
					return "";
				}
			}
		});
	}
	,__class__: djNode_Terminal
};
var djNode_tools_FileTool = function() { };
djNode_tools_FileTool.__name__ = true;
djNode_tools_FileTool.createRecursiveDir = function(inPath) {
	var paths = js_node_Path.normalize(inPath).split(js_node_Path.sep);
	var cM = paths.length;
	if(cM <= 0) {
		throw new js__$Boot_HaxeError("Path is empty!");
	}
	var c = 0;
	var p1 = "";
	if(paths[0].indexOf(":") > 0) {
		try {
			js_node_Fs.statSync(paths[0]);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,Error) ) {
				throw new js__$Boot_HaxeError("Drive " + paths[0] + " does not exist!!");
			} else throw(e);
		}
		c = 1;
		p1 = paths[0] + js_node_Path.sep;
	}
	while(c < cM) {
		p1 = js_node_Path.join(p1,paths[c]);
		if(djNode_tools_FileTool.pathExists(p1) == false) {
			js_node_Fs.mkdirSync(p1);
		}
		++c;
	}
};
djNode_tools_FileTool.pathExists = function(path) {
	try {
		js_node_Fs.statSync(path);
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,Error) ) {
			return false;
		} else throw(e);
	}
	return true;
};
djNode_tools_FileTool.copyFile = function(source,dest) {
	js_node_Fs.writeFileSync(dest,js_node_Fs.readFileSync(source));
};
djNode_tools_FileTool.getFileListFromDir = function(inPath,fullPath) {
	if(fullPath == null) {
		fullPath = false;
	}
	var allfiles = js_node_Fs.readdirSync(js_node_Path.normalize(inPath));
	var ret = [];
	var _g = 0;
	while(_g < allfiles.length) {
		var f = allfiles[_g];
		++_g;
		if(js_node_Fs.statSync(js_node_Path.join(inPath,f)).isFile()) {
			if(fullPath) {
				ret.push(js_node_Path.join(inPath,f));
			} else {
				ret.push(f);
			}
		}
	}
	return ret;
};
djNode_tools_FileTool.getFileListFromDirR = function(rootPath,ext) {
	var res = [];
	var pushFiles = null;
	pushFiles = function(path) {
		var files = js_node_Fs.readdirSync(js_node_Path.normalize(path));
		var _g = 0;
		while(_g < files.length) {
			var f = files[_g];
			++_g;
			var fp = js_node_Path.join(path,f);
			if(js_node_Fs.statSync(fp).isDirectory()) {
				pushFiles(fp);
			} else if(ext != null) {
				var pushFiles1 = djNode_tools_FileTool.getFileExt(f);
				if(ext.indexOf(pushFiles1) > -1) {
					res.push(fp);
				}
			}
		}
	};
	pushFiles(rootPath);
	return res;
};
djNode_tools_FileTool.getFileListFromWildcard = function(path) {
	var fileList = [];
	var basePath = js_node_Path.dirname(path);
	var extToGet = djNode_tools_FileTool.getFileExt(path).toLowerCase();
	var baseToGet;
	var exp = new EReg("(\\S*)\\.","");
	if(exp.match(js_node_Path.basename(path))) {
		baseToGet = exp.matched(1);
		if(baseToGet.length > 1 && baseToGet.indexOf("*") > 0) {
			throw new js__$Boot_HaxeError("Advanced search is currently unsupported, use basic [*.*] or [*.ext]");
		}
	} else {
		baseToGet = "*";
	}
	var allfiles = js_node_Fs.readdirSync(js_node_Path.normalize(basePath));
	var stats;
	var _g = 0;
	while(_g < allfiles.length) {
		var i = allfiles[_g];
		++_g;
		try {
			stats = js_node_Fs.statSync(js_node_Path.join(basePath,i));
		} catch( e ) {
			continue;
		}
		if(stats.isFile()) {
			if(baseToGet != "*") {
				if(exp.match(i)) {
					if(baseToGet != exp.matched(1)) {
						continue;
					}
				} else {
					continue;
				}
			}
			if(extToGet == "*") {
				fileList.push(js_node_Path.join(basePath,i));
				continue;
			}
			if(extToGet == HxOverrides.substr(js_node_Path.extname(i),1,null).toLowerCase()) {
				fileList.push(js_node_Path.join(basePath,i));
				continue;
			}
		}
	}
	return fileList;
};
djNode_tools_FileTool.getFileMD5 = function(file) {
	var fd = js_node_Fs.openSync(file,"r");
	var hash = js_node_Crypto.createHash("md5");
	var buffer = js_node_buffer_Buffer.alloc(8192);
	try {
		var bytesRead = 0;
		while(true) {
			bytesRead = js_node_Fs.readSync(fd,buffer,0,8192,null);
			hash.update(buffer.slice(0,bytesRead));
			if(!(bytesRead == 8192)) {
				break;
			}
		}
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,Error) ) {
			js_node_Fs.closeSync(fd);
			return null;
		} else throw(e);
	}
	js_node_Fs.closeSync(fd);
	return hash.digest("hex");
};
djNode_tools_FileTool.getFileExt = function(file) {
	return HxOverrides.substr(js_node_Path.extname(file),1,null).toLowerCase();
};
var djNode_tools_LOG = function() { };
djNode_tools_LOG.__name__ = true;
djNode_tools_LOG.init = function(file,realtime) {
	if(realtime == null) {
		realtime = false;
	}
	if(djNode_tools_LOG._isInited) {
		return;
	}
	djNode_tools_LOG._isInited = true;
	djNode_tools_LOG.messages = [];
	djNode_tools_LOG.messageTypes = ["DEBUG","INFO","WARN","ERROR","FATAL"];
	if(file != null) {
		djNode_tools_LOG.setLogFile(file,realtime);
	}
};
djNode_tools_LOG.end = function() {
	if(djNode_tools_LOG.logFile != null && djNode_tools_LOG.flag_realtime_file == false) {
		var _g = 0;
		var _g1 = djNode_tools_LOG.messages;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			djNode_tools_LOG.push_File(i);
		}
	}
	if(djNode_tools_LOG.flag_socket_log) {
		djNode_tools_LOG.io.close();
	}
};
djNode_tools_LOG.log = function(obj,level,pos) {
	if(level == null) {
		level = 1;
	}
	if(level < djNode_tools_LOG.logLevel) {
		return;
	}
	var logmsg = { pos : pos, log : Std.string(obj), level : level};
	if(djNode_tools_LOG.flag_keep_in_memory) {
		if(djNode_tools_LOG.messages.length == djNode_tools_LOG.param_memory_buffer) {
			djNode_tools_LOG.messages.shift();
		}
		djNode_tools_LOG.messages.push(logmsg);
	}
	if(djNode_tools_LOG.flag_socket_log) {
		djNode_tools_LOG.io.sockets.emit("logText",{ data : logmsg.log, pos : logmsg.pos, level : logmsg.level});
	}
	if(djNode_tools_LOG.flag_realtime_file && djNode_tools_LOG.logFile != null) {
		djNode_tools_LOG.push_File(logmsg);
	}
	if(djNode_tools_LOG.onLog != null) {
		djNode_tools_LOG.onLog(logmsg);
	}
};
djNode_tools_LOG.push_File = function(log) {
	js_node_Fs.appendFileSync(djNode_tools_LOG.logFile,djNode_tools_LOG.messageTypes[log.level] + " (" + log.pos.fileName + ":" + log.pos.lineNumber + ") " + log.log + "\n","utf8");
};
djNode_tools_LOG.setLogFile = function(filename,realtime_update) {
	if(realtime_update == null) {
		realtime_update = false;
	}
	djNode_tools_LOG.logFile = filename;
	djNode_tools_LOG.flag_realtime_file = realtime_update;
	try {
		var fileHeader = " - LOG -\n" + " -------\n" + " - " + djNode_tools_LOG.logFile + "\n" + " - Created: " + HxOverrides.dateStr(new Date()) + "\n" + " - App: " + js_node_Path.basename(process.argv[1]) + "\n" + " ---------------------------------------------------\n\n";
		js_node_Fs.writeFileSync(djNode_tools_LOG.logFile,fileHeader,"utf8");
	} catch( e ) {
		djNode_tools_LOG.log("Could not create logfile - " + djNode_tools_LOG.logFile,3,{ fileName : "LOG.hx", lineNumber : 277, className : "djNode.tools.LOG", methodName : "setLogFile"});
		djNode_tools_LOG.logFile = null;
	}
	if(djNode_tools_LOG.flag_realtime_file && djNode_tools_LOG.messages.length > 0 && djNode_tools_LOG.logFile != null) {
		var _g = 0;
		var _g1 = djNode_tools_LOG.messages;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			djNode_tools_LOG.push_File(i);
		}
	}
};
var djNode_utils_ProcUtil = function() { };
djNode_utils_ProcUtil.__name__ = true;
djNode_utils_ProcUtil.getTaskPIDs = function(exe) {
	var PIDS = [];
	try {
		var lines = js_node_ChildProcess.execSync("tasklist").toString().split("\n");
		var reg = new EReg("(\\S+)\\s*(\\d+)","ig");
		var _g = 0;
		while(_g < lines.length) {
			var l = lines[_g];
			++_g;
			if(reg.match(l)) {
				if(reg.matched(1).toLowerCase() == exe.toLowerCase()) {
					PIDS.push(reg.matched(2));
				}
			}
		}
	} catch( e ) {
	}
	return PIDS;
};
var djTui_Align = function() {
};
djTui_Align.__name__ = true;
djTui_Align.prototype = {
	screen: function(win,alignX,alignY,pad) {
		if(pad == null) {
			pad = 0;
		}
		if(alignY == null) {
			alignY = "center";
		}
		if(alignX == null) {
			alignX = "center";
		}
		var tx = 0;
		var ty = 0;
		switch(alignX) {
		case "center":
			tx = djTui_WM.width / 2 - win.width / 2 | 0;
			break;
		case "left":
			tx = pad;
			break;
		case "right":
			tx = djTui_WM.width - win.width - pad;
			break;
		default:
		}
		switch(alignY) {
		case "bottom":
			ty = djTui_WM.height - win.height - pad;
			break;
		case "center":
			ty = djTui_WM.height / 2 - win.height / 2 | 0;
			break;
		case "top":
			ty = pad;
			break;
		default:
		}
		win.pos(tx,ty);
		return win;
	}
	,down: function(A,B,offx,offy) {
		if(offy == null) {
			offy = 0;
		}
		if(offx == null) {
			offx = 0;
		}
		A.move(B.x + offx,B.y + B.height + offy);
		return A;
	}
	,__class__: djTui_Align
};
var djTui_BaseElement = function(sid) {
	this.flag_lock_focus = false;
	this.flag_focusable = true;
	this.lockDraw = false;
	this.parent = null;
	this.isFocused = false;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.UID = djTui_BaseElement.UID_GEN++;
	this.SID = sid;
	this.callbacks = [];
	this.set_visible(false);
	if(this.SID == null || this.SID == "") {
		this.SID = "id_" + this.UID;
	}
};
djTui_BaseElement.__name__ = true;
djTui_BaseElement.focusNext = function(ar,act,loop) {
	if(loop == null) {
		loop = true;
	}
	if(ar.length == 0) {
		return false;
	}
	var ia = ar.indexOf(act);
	var j = ia;
	while(true) {
		++j;
		if(j >= ar.length) {
			if(ia == -1) {
				return false;
			}
			if(loop) {
				j = 0;
			} else {
				return false;
			}
		}
		if(j == ia) {
			return false;
		}
		if(ar[j].flag_focusable && ar[j].visible) {
			break;
		}
	}
	ar[j].focus();
	return true;
};
djTui_BaseElement.focusPrev = function(ar,act,loop) {
	if(loop == null) {
		loop = true;
	}
	if(ar.length == 0) {
		return false;
	}
	var ia = ar.indexOf(act);
	var j = ia;
	if(ia == -1) {
		j = ar.length;
	}
	while(true) {
		--j;
		if(j < 0) {
			if(ia == -1) {
				return false;
			}
			if(loop) {
				j = ar.length - 1;
			} else {
				return false;
			}
		}
		if(j == ia) {
			return false;
		}
		if(ar[j].flag_focusable && ar[j].visible) {
			break;
		}
	}
	ar[j].focus();
	return true;
};
djTui_BaseElement.prototype = {
	move: function(dx,dy) {
		this.x += dx;
		this.y += dy;
		return this;
	}
	,pos: function(_x,_y) {
		this.move(_x - this.x,_y - this.y);
		return this;
	}
	,posNext: function(el,pad) {
		if(pad == null) {
			pad = 0;
		}
		this.pos(el.x + el.width + pad,el.y);
		return this;
	}
	,setColor: function(pair,fg,bg) {
		if(pair != null) {
			this.colorFG = pair.fg;
			this.colorBG = pair.bg;
		} else {
			this.colorFG = fg;
			this.colorBG = bg;
		}
		if(this.colorBG == null && this.parent != null) {
			this.colorBG = this.parent.colorBG;
		}
		return this;
	}
	,size: function(_w,_h) {
		this.width = _w;
		this.height = _h;
		return this;
	}
	,focus: function() {
		if(this.isFocused || !this.flag_focusable) {
			return;
		}
		this.isFocused = true;
		this.focusSetup(this.isFocused);
		this.callback("focus");
		this.draw();
	}
	,unfocus: function() {
		if(!this.isFocused) {
			return;
		}
		this.isFocused = false;
		this.focusSetup(this.isFocused);
		this.callback("unfocus");
		this.draw();
	}
	,listen: function(fn) {
		this.callbacks.push(fn);
	}
	,callback: function(msg,caller) {
		if(caller == null) {
			caller = this;
		}
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i(msg,caller);
		}
	}
	,onAdded: function() {
	}
	,onKey: function(k) {
	}
	,focusSetup: function(focus) {
	}
	,draw: function() {
	}
	,clear: function() {
		if(!this.lockDraw) {
			djTui_WM.T.reset().bg(this.parent.colorBG);
			djTui_WM.D.rect(this.x,this.y,this.width,this.height);
		}
	}
	,overlapsWith: function(el) {
		if(this.x + this.width > el.x && this.x < el.x + el.width && this.y + this.height > el.y) {
			return this.y < el.y + el.height;
		} else {
			return false;
		}
	}
	,set_visible: function(val) {
		return this.visible = val;
	}
	,__class__: djTui_BaseElement
	,__properties__: {set_visible:"set_visible"}
};
var djTui_Draw = function() {
};
djTui_Draw.__name__ = true;
djTui_Draw.prototype = {
	rect: function(x,y,width,height,$char) {
		if($char == null) {
			$char = " ";
		}
		var s = StringTools.lpad("",$char,width);
		var _g1 = y;
		var _g = y + height;
		while(_g1 < _g) djTui_WM.T.move(x,_g1++).print(s);
	}
	,border: function(x,y,width,height,style) {
		if(style == null) {
			style = 1;
		}
		var bs = djTui_Styles.border[style];
		this.lineH(x + 1,y,width - 2,bs.charAt(1));
		this.lineV(x,y + 1,height - 2,bs.charAt(6));
		this.lineV(x + width - 1,y + 1,height - 2,bs.charAt(7));
		this.lineH(x + 1,y + height - 1,width - 2,bs.charAt(4));
		djTui_WM.T.move(x,y).print(bs.charAt(0)).moveR(width - 2,0).print(bs.charAt(2));
		djTui_WM.T.move(x,y + height - 1).print(bs.charAt(3)).moveR(width - 2,0).print(bs.charAt(5));
	}
	,lineH: function(x,y,width,s) {
		if(s == null) {
			s = "-";
		}
		djTui_WM.T.move(x,y).print(StringTools.lpad("",s,width));
	}
	,lineV: function(x,y,height,s) {
		if(s == null) {
			s = "|";
		}
		djTui_WM.T.move(x,y);
		var c = 0;
		while(c < height) djTui_WM.T.move(x,y + c++).print(s);
	}
	,drawGrid: function(x,y,rowsStr,rowsInt,Sin,Sout) {
		var W = 0;
		var H = 0;
		var boxes = [];
		var boxH = [];
		if(rowsStr != null) {
			var _g1 = 0;
			var _g = rowsStr.length;
			while(_g1 < _g) {
				var r = _g1++;
				boxes[r] = rowsStr[r].split("|").map(function(s) {
					return Std.parseInt(s);
				});
				boxH[r] = boxes[r].pop();
			}
		}
		if(rowsInt != null) {
			var _g11 = 0;
			var _g2 = rowsInt.length;
			while(_g11 < _g2) {
				var r1 = _g11++;
				boxes[r1] = rowsInt[r1];
				boxH[r1] = boxes[r1].pop();
			}
		}
		var _g3 = 0;
		var _g12 = boxes[0];
		while(_g3 < _g12.length) {
			var w = _g12[_g3];
			++_g3;
			W += w;
		}
		var _g4 = 0;
		while(_g4 < boxH.length) {
			var h = boxH[_g4];
			++_g4;
			H += h;
		}
		if(Sout > 0) {
			this.border(x,y,W,H,Sout);
		}
		var currentRowTop = y;
		var _g13 = 0;
		var _g5 = boxH.length;
		while(_g13 < _g5) {
			var r2 = _g13++;
			var rowH = boxH[r2] - 1;
			if(r2 == 0) {
				--rowH;
			}
			if(r2 != boxH.length - 1) {
				this.lineH(x + 1,currentRowTop + rowH + 1,W - 2,djTui_Styles.border[Sin].charAt(1));
				djTui_WM.T.move(x,currentRowTop + rowH + 1).print(djTui_Styles.connectBorder(Sin,Sout,2));
				djTui_WM.T.moveR(W - 2,0).print(djTui_Styles.connectBorder(Sin,Sout,3));
			}
			var cBoxEdge = x;
			var _g31 = 0;
			var _g21 = boxes[r2].length;
			while(_g31 < _g21) {
				var b = _g31++;
				var boxwidth = boxes[r2][b] - 1;
				if(b == 0) {
					--boxwidth;
				}
				cBoxEdge += boxwidth + 1;
				boxes[r2][b] = cBoxEdge;
				if(b == boxes[r2].length - 1) {
					continue;
				}
				this.lineV(cBoxEdge,currentRowTop + 1,rowH,djTui_Styles.border[Sin].charAt(7));
				var S0 = null;
				var S1 = null;
				if(r2 == 0) {
					S0 = djTui_Styles.connectBorder(Sin,Sout,0);
				} else {
					var _g41 = 0;
					var _g51 = boxes[r2 - 1];
					while(_g41 < _g51.length) {
						var i = _g51[_g41];
						++_g41;
						if(i == cBoxEdge) {
							S0 = djTui_Styles.connectBorder(Sin,Sin,4);
						}
					}
					if(S0 == null) {
						S0 = djTui_Styles.connectBorder(Sin,Sin,0);
					}
				}
				if(r2 == boxH.length - 1) {
					S1 = djTui_Styles.connectBorder(Sin,Sout,1);
				} else {
					S1 = djTui_Styles.connectBorder(Sin,Sin,1);
				}
				djTui_WM.T.move(cBoxEdge,currentRowTop).print(S0);
				djTui_WM.T.move(cBoxEdge,currentRowTop + rowH + 1).print(S1);
			}
			currentRowTop += rowH + 1;
		}
	}
	,__class__: djTui_Draw
};
var djTui_ElementType = { __ename__ : true, __constructs__ : ["button","label","option","number","textbox","vlist","toggle","input","window"] };
djTui_ElementType.button = ["button",0];
djTui_ElementType.button.toString = $estr;
djTui_ElementType.button.__enum__ = djTui_ElementType;
djTui_ElementType.label = ["label",1];
djTui_ElementType.label.toString = $estr;
djTui_ElementType.label.__enum__ = djTui_ElementType;
djTui_ElementType.option = ["option",2];
djTui_ElementType.option.toString = $estr;
djTui_ElementType.option.__enum__ = djTui_ElementType;
djTui_ElementType.number = ["number",3];
djTui_ElementType.number.toString = $estr;
djTui_ElementType.number.__enum__ = djTui_ElementType;
djTui_ElementType.textbox = ["textbox",4];
djTui_ElementType.textbox.toString = $estr;
djTui_ElementType.textbox.__enum__ = djTui_ElementType;
djTui_ElementType.vlist = ["vlist",5];
djTui_ElementType.vlist.toString = $estr;
djTui_ElementType.vlist.__enum__ = djTui_ElementType;
djTui_ElementType.toggle = ["toggle",6];
djTui_ElementType.toggle.toString = $estr;
djTui_ElementType.toggle.__enum__ = djTui_ElementType;
djTui_ElementType.input = ["input",7];
djTui_ElementType.input.toString = $estr;
djTui_ElementType.input.__enum__ = djTui_ElementType;
djTui_ElementType.window = ["window",8];
djTui_ElementType.window.toString = $estr;
djTui_ElementType.window.__enum__ = djTui_ElementType;
var djTui_StrTool = function() { };
djTui_StrTool.__name__ = true;
djTui_StrTool.padString = function(str,length,align) {
	if(align == null) {
		align = "left";
	}
	var b = length - str.length;
	if(b == 0) {
		return str;
	}
	if(b < 0) {
		return str.substring(0,length - 1) + "~";
	}
	switch(align) {
	case "center":
		str = StringTools.rpad(""," ",Math.ceil(b / 2)) + str + StringTools.rpad(""," ",Math.floor(b / 2));
		break;
	case "left":
		str = StringTools.rpad(str," ",length);
		break;
	case "right":
		str = StringTools.lpad(str," ",length);
		break;
	}
	return str;
};
djTui_StrTool.splitToLines = function(str,width) {
	var _this_r = new RegExp("(\n)","g".split("u").join(""));
	str = str.replace(_this_r," #nl# ");
	var _this_r1 = new RegExp("(\\s|\t)","g".split("u").join(""));
	str = str.replace(_this_r1," ");
	var ar = str.split(" ");
	var result = [];
	var f = 0;
	var fmax = ar.length;
	var clen = 0;
	var line = "";
	var _ll = 0;
	var ___ffpush = function(s) {
		result.push(s);
		clen = 0;
		line = "";
	};
	while(true) {
		if(ar[f] == "#nl#") {
			___ffpush(line);
			if(!(++f < fmax)) {
				break;
			} else {
				continue;
			}
		}
		_ll = ar[f].length;
		if(_ll + clen < width) {
			line += ar[f] + " ";
			clen += _ll + 1;
		} else if(_ll + clen > width) {
			if(clen > 0) {
				result.push(line);
				line = ar[f] + " ";
				clen = _ll + 1;
			} else {
				line = ar[f].substring(0,width - 1) + "~";
				___ffpush(line);
			}
		} else {
			___ffpush(line + ar[f]);
		}
		if(!(++f < fmax)) {
			break;
		}
	}
	if(clen > 0) {
		___ffpush(line);
	}
	return result;
};
djTui_StrTool.empty = function(len) {
	return StringTools.lpad(""," ",len);
};
var djTui_Styles = function() { };
djTui_Styles.__name__ = true;
djTui_Styles.init = function() {
	djTui_Styles.arrowsLR = ["<>","◄►","←→","«»"];
	djTui_Styles.border = ["        ","┌─┐└─┘││","╔═╗╚═╝║║","╓─╖╙─╜║║","╒═╕╘═╛││","/-\\\\=/||","█▀██▄█▌▐"];
	djTui_Styles.bCon = ["","┬┴├┤┼","╦╩╠╣╬","╤╧╟╢╪","╥╨╞╡╫","--||T","█▄▌▐█"];
	djTui_Styles.win = new haxe_ds_StringMap();
	var value = djTui_Styles.createWinStyle("yellow","magenta","white","blue","darkblue");
	var _this = djTui_Styles.win;
	if(__map_reserved["blue.1"] != null) {
		_this.setReserved("blue.1",value);
	} else {
		_this.h["blue.1"] = value;
	}
	var value1 = djTui_Styles.createWinStyle("yellow","red","white","darkgreen","darkgray");
	var _this1 = djTui_Styles.win;
	if(__map_reserved["green.1"] != null) {
		_this1.setReserved("green.1",value1);
	} else {
		_this1.h["green.1"] = value1;
	}
	var value2 = djTui_Styles.createWinStyle("yellow","magenta","white","red","darkred");
	var _this2 = djTui_Styles.win;
	if(__map_reserved["red.1"] != null) {
		_this2.setReserved("red.1",value2);
	} else {
		_this2.h["red.1"] = value2;
	}
	var value3 = djTui_Styles.createWinStyle("black","cyan","black","magenta","darkcyan");
	var _this3 = djTui_Styles.win;
	if(__map_reserved["magenta.1"] != null) {
		_this3.setReserved("magenta.1",value3);
	} else {
		_this3.h["magenta.1"] = value3;
	}
	var value4 = djTui_Styles.createWinStyle("yellow","red","white","black","gray");
	var _this4 = djTui_Styles.win;
	if(__map_reserved["black.1"] != null) {
		_this4.setReserved("black.1",value4);
	} else {
		_this4.h["black.1"] = value4;
	}
	var value5 = djTui_Styles.createWinStyle("black","magenta","black","cyan","gray");
	var _this5 = djTui_Styles.win;
	if(__map_reserved["cyan.1"] != null) {
		_this5.setReserved("cyan.1",value5);
	} else {
		_this5.h["cyan.1"] = value5;
	}
	var value6 = djTui_Styles.createWinStyle("white","blue","black","gray","darkgray");
	var _this6 = djTui_Styles.win;
	if(__map_reserved["gray.1"] != null) {
		_this6.setReserved("gray.1",value6);
	} else {
		_this6.h["gray.1"] = value6;
	}
};
djTui_Styles.connectBorder = function(from,to,t) {
	if(from == 1 && to == 2) {
		return djTui_Styles.bCon[3].charAt(t);
	}
	if(from == 2 && to == 1) {
		return djTui_Styles.bCon[4].charAt(t);
	}
	return djTui_Styles.bCon[from].charAt(t);
};
djTui_Styles.createWinStyle = function(A,B,C,D,E,BorderStyle) {
	if(BorderStyle == null) {
		BorderStyle = 1;
	}
	return { bg : D, text : C, titleColor : { fg : A}, borderStyle : BorderStyle, borderColor : { fg : C}, elem_focus : { fg : B, bg : A}, elem_idle : { fg : C}, elem_disable_f : { fg : D, bg : E}, elem_disable_i : { fg : E}, scrollbar_idle : { fg : C}, scrollbar_focus : { fg : A, bg : B}, textbox : { fg : C}, vlist_cursor : { fg : D, bg : A}};
};
var djTui_Tools = function() { };
djTui_Tools.__name__ = true;
djTui_Tools.copyFields = function(from,into) {
	if(from == null) {
		return into;
	}
	if(into == null) {
		into = Reflect.copy(from);
	} else {
		var _g = 0;
		var _g1 = Reflect.fields(from);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(Reflect.field(from,f) != null) {
				into[f] = Reflect.field(from,f);
			}
		}
	}
	return into;
};
djTui_Tools.isEmpty = function(str) {
	if(str != null) {
		return str.length == 0;
	} else {
		return true;
	}
};
var djTui_WM = function() { };
djTui_WM.__name__ = true;
djTui_WM.__properties__ = {set_backgroundColor:"set_backgroundColor"};
djTui_WM.create = function(i,t,_w,_h,styleWin,stylePop) {
	if(_h == null) {
		_h = 0;
	}
	if(_w == null) {
		_w = 0;
	}
	djTui_WM.width = _w;
	djTui_WM.height = _h;
	djTui_WM.I = i;
	djTui_WM.T = t;
	djTui_WM.D = new djTui_Draw();
	djTui_WM.DB = new haxe_ds_StringMap();
	djTui_WM.A = new djTui_Align();
	djTui_WM.STATE = new djTui_WindowStateManager();
	if(djTui_WM.width <= 0) {
		djTui_WM.width = djTui_WM.T.MAX_WIDTH;
	}
	if(djTui_WM.height <= 0) {
		djTui_WM.height = djTui_WM.T.MAX_HEIGHT;
	}
	djTui_Styles.init();
	if(styleWin == null) {
		styleWin = "blue.1";
	}
	if(stylePop == null) {
		stylePop = "red.1";
	}
	var _this = djTui_Styles.win;
	djTui_WM.global_style_win = Reflect.copy(__map_reserved[styleWin] != null ? _this.getReserved(styleWin) : _this.h[styleWin]);
	var _this1 = djTui_Styles.win;
	djTui_WM.global_style_pop = Reflect.copy(__map_reserved[stylePop] != null ? _this1.getReserved(stylePop) : _this1.h[stylePop]);
	djTui_WM.I.onKey = djTui_WM._onKey;
	djTui_WM.I.start();
	djTui_WM.closeAll();
	djTui_WM.set_TAB_behavior();
	djTui_WM._isInited = true;
};
djTui_WM.set_backgroundColor = function(col) {
	if(col == djTui_WM.backgroundColor) {
		return col;
	}
	djTui_WM.backgroundColor = col;
	djTui_WM.clearBG();
	var _g = 0;
	var _g1 = djTui_WM.win_list;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		i.draw();
	}
	return col;
};
djTui_WM.closeAll = function() {
	djTui_WM.win_list = [];
	djTui_WM.active = djTui_WM.active_last = null;
	var _g = 0;
	var _g1 = djTui_WM.win_list;
	while(_g < _g1.length) {
		var w = _g1[_g];
		++_g;
		w.set_visible(false);
	}
	djTui_WM.clearBG();
	djTui_WM.STATE.current = null;
};
djTui_WM.clearBG = function() {
	djTui_WM.T.reset();
	djTui_WM.T.bg(djTui_WM.backgroundColor);
	djTui_WM.D.rect(0,0,djTui_WM.width,djTui_WM.height);
};
djTui_WM.add = function(w,autoFocus) {
	if(autoFocus == null) {
		autoFocus = false;
	}
	if(w.x < 0) {
		w.pos(0,w.y);
	} else if(w.x + w.width > djTui_WM.width) {
		w.pos(djTui_WM.width - w.width,w.y);
	}
	if(w.y < 0) {
		w.pos(w.x,0);
	} else if(w.y + w.height > djTui_WM.height) {
		w.pos(w.x,djTui_WM.height - w.height);
	}
	if(djTui_WM.win_list.indexOf(w) == -1) {
		djTui_WM.win_list.push(w);
		w.callback_wm = djTui_WM.onWindowCallbacks;
	}
	w.set_visible(true);
	w.draw();
	if(autoFocus && w.flag_focusable) {
		w.focus();
	}
};
djTui_WM.set_TAB_behavior = function(level,param) {
	if(param == null) {
		param = "";
	}
	if(level == null) {
		level = "WINDOW";
	}
	djTui_WM._TAB_TYPE = param;
	djTui_WM._TAB_LEVEL = ["NONE","WM","WINDOW"].indexOf(level);
	if(djTui_WM._TAB_LEVEL < 0) {
		throw new js__$Boot_HaxeError("set_TAB_behavior invalid level ID");
	}
};
djTui_WM.popupConfirm = function(callback,Q,pos) {
	var m = new djTui_win_MessageBox(Q,2,function(res) {
		if(res == 0) {
			callback();
		}
	});
	m.flag_close_on_esc = true;
	if(pos == null) {
		djTui_WM.A.screen(m);
	} else {
		m.pos(pos[0],pos[1]);
	}
	if(djTui_WM.active != null) {
		djTui_WM.active.openSub(m,true);
	} else {
		m.openAnimated();
	}
	return m;
};
djTui_WM.focusNext = function() {
	djTui_BaseElement.focusNext(djTui_WM.win_list,djTui_WM.active);
};
djTui_WM.closeWindow = function(win) {
	HxOverrides.remove(djTui_WM.win_list,win);
	djTui_WM.T.reset();
	djTui_WM.T.bg(djTui_WM.backgroundColor);
	djTui_WM.D.rect(win.x,win.y,win.width,win.height);
	var _g = 0;
	var _g1 = djTui_WM.win_list;
	while(_g < _g1.length) {
		var w = _g1[_g];
		++_g;
		if(w.overlapsWith(win)) {
			w.draw();
		}
	}
	if(djTui_WM.active == win) {
		djTui_WM.active = null;
		if(djTui_WM.active_last != null && djTui_WM.active_last.visible == true) {
			djTui_WM.active_last.focus();
		}
	}
};
djTui_WM.windowOverlapsWithAny = function(win) {
	var _g = 0;
	var _g1 = djTui_WM.win_list;
	while(_g < _g1.length) {
		var w = _g1[_g];
		++_g;
		if(win == w) {
			continue;
		}
		if(win.overlapsWith(w)) {
			return true;
		}
	}
	return false;
};
djTui_WM._onKey = function(key) {
	if(key == "esc") {
		if(djTui_WM.active != null && djTui_WM.active.flag_close_on_esc) {
			djTui_WM.active.close();
		} else {
			if(djTui_WM.STATE.handleESC()) {
				return;
			}
			djTui_WM.active.onKey("esc");
		}
	} else if(djTui_WM._TAB_LEVEL == 1 && key == "tab") {
		if(djTui_WM.active != null && djTui_WM.active.flag_lock_focus) {
			djTui_WM.active.onKey("tab");
			return;
		}
		if(djTui_WM.active != null && djTui_WM._TAB_TYPE == "keep") {
			djTui_WM.active.flag_return_focus_once = true;
		}
		djTui_WM.focusNext();
	} else if(djTui_WM.active != null) {
		djTui_WM.active.onKey(key);
	}
	if(djTui_WM.onKey != null) {
		djTui_WM.onKey(key);
	}
};
djTui_WM.onWindowCallbacks = function(status,win) {
	switch(status) {
	case "close":
		djTui_WM.closeWindow(win);
		break;
	case "focus":
		if(djTui_WM.active == win) {
			return;
		}
		if(djTui_WM.active != null) {
			djTui_WM.active.unfocus();
		}
		djTui_WM.active_last = djTui_WM.active;
		djTui_WM.active = win;
		if(djTui_WM.windowOverlapsWithAny(win)) {
			win.draw();
		}
		break;
	case "focus_next":
		if(!djTui_BaseElement.focusNext(djTui_WM.win_list,djTui_WM.active)) {
			win.focusNext(true);
		}
		break;
	default:
	}
};
var djTui_Window = function(sid,_w,_h,_style) {
	if(_h == null) {
		_h = 5;
	}
	if(_w == null) {
		_w = 5;
	}
	this.flag_return_focus_once = false;
	this.flag_close_on_bksp = false;
	this.flag_close_on_esc = false;
	this.rPadY = 0;
	this.rPadX = 0;
	this.padY = 0;
	this.padX = 0;
	this.display_list = [];
	if(sid != null) {
		var _this = djTui_WM.DB;
		if(!(__map_reserved[sid] != null ? _this.existsReserved(sid) : _this.h.hasOwnProperty(sid))) {
			var _this1 = djTui_WM.DB;
			if(__map_reserved[sid] != null) {
				_this1.setReserved(sid,this);
			} else {
				_this1.h[sid] = this;
			}
		}
	}
	djTui_BaseElement.call(this,sid);
	this.type = djTui_ElementType.window;
	this.border_el = new djTui_el_Border();
	this.addChild(this.border_el);
	if(_style != null) {
		this.set_style(Reflect.copy(_style));
	} else {
		this.set_style(Reflect.copy(djTui_WM.global_style_win));
	}
	this.size(_w,_h);
};
djTui_Window.__name__ = true;
djTui_Window.__super__ = djTui_BaseElement;
djTui_Window.prototype = $extend(djTui_BaseElement.prototype,{
	modifyStyle: function(o) {
		var t = Reflect.copy(this.style);
		djTui_Tools.copyFields(o,t);
		this.set_style(t);
		var _g = 0;
		var _g1 = this.display_list;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.focusSetup(i.isFocused);
		}
	}
	,getEl: function(sid) {
		var _g = 0;
		var _g1 = this.display_list;
		while(_g < _g1.length) {
			var el = _g1[_g];
			++_g;
			if(el.SID == sid) {
				return el;
			}
		}
		return null;
	}
	,getElIndex: function(ind) {
		if(this.display_list.length > ind) {
			return this.display_list[ind];
		}
		return null;
	}
	,move: function(dx,dy) {
		this.x += dx;
		this.y += dy;
		var _g = 0;
		var _g1 = this.display_list;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.move(dx,dy);
		}
		if(this.visible) {
			this.draw();
		}
		return this;
	}
	,size: function(_w,_h) {
		if(_w < 0) {
			_w = Math.floor(djTui_WM.width / -_w);
		}
		if(_h < 0) {
			_h = Math.floor(djTui_WM.height / -_h);
		}
		djTui_BaseElement.prototype.size.call(this,_w,_h);
		this.border_el.size(_w,_h);
		return this;
	}
	,padding: function(xx,yy) {
		if(yy == null) {
			yy = -1;
		}
		if(yy == -1) {
			yy = xx;
		}
		this.rPadX = xx;
		this.rPadY = yy;
		this.padX = xx;
		this.padY = yy;
		if(this.borderStyle > 0) {
			this.padX++;
			this.padY++;
		}
		return this;
	}
	,addChild: function(el) {
		this.display_list.push(el);
		el.listen($bind(this,this.onElementCallback));
		el.parent = this;
		el.onAdded();
		el.set_visible(this.visible);
		if(el.flag_focusable) {
			el.focusSetup(this.isFocused);
		}
		if(this.visible && !this.lockDraw) {
			el.draw();
		}
		return el;
	}
	,removeChild: function(el) {
		if(HxOverrides.remove(this.display_list,el)) {
			el.set_visible(false);
			if(this.visible && !this.lockDraw) {
				this.draw();
			}
		}
	}
	,addStack: function(el,yPad,align) {
		if(align == null) {
			align = "left";
		}
		if(yPad == null) {
			yPad = 0;
		}
		switch(align) {
		case "center":
			el.x = this.x + (this.width / 2 - el.width / 2 | 0);
			break;
		case "left":
			el.x = this.x + this.padX;
			break;
		case "right":
			el.x = this.x + this.width - el.width;
			break;
		default:
		}
		if(this.lastAdded == null) {
			el.y = this.y + this.padY + yPad;
		} else {
			el.y = this.lastAdded.y + this.lastAdded.height + yPad;
		}
		this.addChild(el);
		this.lastAdded = el;
		return el;
	}
	,addStackInline: function(el,yPad,xPad,align) {
		if(align == null) {
			align = "left";
		}
		if(xPad == null) {
			xPad = 1;
		}
		if(yPad == null) {
			yPad = 0;
		}
		var yloc = 0;
		if(this.lastAdded == null) {
			yloc = this.y + this.padY;
		} else {
			yloc = this.lastAdded.y + this.lastAdded.height + yPad;
		}
		var totalWidth = 0;
		var _g = 0;
		while(_g < el.length) {
			var i = el[_g];
			++_g;
			totalWidth += i.width;
		}
		totalWidth += (el.length - 1) * xPad;
		var startX = 0;
		if(align == "center") {
			startX = this.x + (this.width / 2 - totalWidth / 2 | 0);
		} else {
			startX = this.x + this.padX;
		}
		var _g1 = 0;
		var _g2 = el.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			el[i1].pos(startX,yloc);
			startX = el[i1].x + el[i1].width + xPad;
			this.addChild(el[i1]);
			if(el[i1].type == djTui_ElementType.button) {
				(js_Boot.__cast(el[i1] , djTui_el_Button)).flag_leftright_escape = true;
			}
		}
		this.lastAdded = el[el.length - 1];
	}
	,isOptionsPopup: function() {
		this.flag_close_on_esc = true;
		this.flag_close_on_bksp = true;
		this.flag_lock_focus = true;
	}
	,addSeparator: function(forceStyle) {
		if(forceStyle == null) {
			forceStyle = 0;
		}
		if(forceStyle == 0) {
			forceStyle = this.borderStyle;
		}
		this.addStack(new djTui_el_Label(StringTools.lpad("",djTui_Styles.border[forceStyle].charAt(1),this.get_inWidth()),0,"center"));
	}
	,close: function() {
		if(this.visible == false) {
			return;
		}
		this.set_visible(false);
		this.unfocus();
		this.callback_wm("close",this);
		this.callback("close");
	}
	,open: function(autoFocus) {
		if(autoFocus == null) {
			autoFocus = false;
		}
		djTui_WM.add(this,autoFocus);
		this.callback("open");
	}
	,openAnimated: function() {
		var _gthis = this;
		if(djTui_WM.active != null) {
			djTui_WM.active.unfocus();
		}
		var st = [0.3,0.6];
		var t = new haxe_Timer(djTui_Window.windowAnimationTick);
		var c = 0;
		t.run = function() {
			var w = Math.ceil(st[c] * _gthis.width);
			var h = Math.ceil(st[c] * _gthis.height);
			var xx = Math.ceil(_gthis.x + (_gthis.width - w) / 2);
			var yy = Math.ceil(_gthis.y + (_gthis.height - h) / 2);
			djTui_WM.T.reset().fg(_gthis.colorFG).bg(_gthis.colorBG);
			djTui_WM.D.rect(xx,yy,w,h);
			if(_gthis.borderStyle > 0) {
				djTui_WM.D.border(xx,yy,w,h,_gthis.borderStyle);
			}
			if((c += 1) == st.length) {
				t.stop();
				_gthis.open(true);
			}
		};
	}
	,openSub: function(w,anim) {
		if(anim == null) {
			anim = false;
		}
		this.flag_return_focus_once = true;
		if(anim) {
			w.openAnimated();
		} else {
			w.open(true);
		}
	}
	,focus: function() {
		if(!this.flag_focusable) {
			return;
		}
		if(this.style.borderColor_focus != null) {
			this.border_el.setColor(this.style.borderColor_focus);
			this.border_el.draw();
		}
		if(this.style.titleColor_focus != null && this.title_el != null) {
			this.title_el.setColor(this.style.titleColor_focus);
			this.title_el.draw();
		}
		this.callback_wm("focus",this);
		this.lockDraw = true;
		djTui_BaseElement.prototype.focus.call(this);
		this.lockDraw = false;
		if(this.display_list.length == 0) {
			return;
		}
		if(this.hack_always_focus_this != null) {
			var e = this.getEl(this.hack_always_focus_this);
			if(e != null) {
				e.focus();
			}
			return;
		}
		if(this.flag_return_focus_once && this.active_last != null) {
			this.active_last.focus();
			this.flag_return_focus_once = false;
		} else {
			djTui_BaseElement.focusNext(this.display_list,null);
		}
	}
	,unfocus: function() {
		if(!this.isFocused) {
			return;
		}
		if(this.style.borderColor_focus != null) {
			this.border_el.setColor(this.style.borderColor);
			this.border_el.draw();
		}
		if(this.style.titleColor_focus != null && this.title_el != null) {
			this.title_el.setColor(this.style.titleColor);
			this.title_el.draw();
		}
		if(this.active != null) {
			this.active.unfocus();
		}
		this.active_last = this.active;
		this.active = null;
		this.lockDraw = true;
		djTui_BaseElement.prototype.unfocus.call(this);
		this.lockDraw = false;
	}
	,draw: function() {
		if(this.lockDraw || !this.visible) {
			return;
		}
		djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
		djTui_WM.D.rect(this.x,this.y,this.width,this.height);
		var _g = 0;
		var _g1 = this.display_list;
		while(_g < _g1.length) {
			var el = _g1[_g];
			++_g;
			if(!el.lockDraw) {
				el.draw();
			}
		}
	}
	,focusNext: function(loop) {
		if(loop == null) {
			loop = false;
		}
		return djTui_BaseElement.focusNext(this.display_list,this.active,loop);
	}
	,focusPrev: function() {
		return djTui_BaseElement.focusPrev(this.display_list,this.active,false);
	}
	,activeIsLastFocusable: function() {
		var ai = this.display_list.indexOf(this.active);
		var ni = this.display_list.length;
		while(ni-- > 0) if(this.display_list[ni].flag_focusable) {
			break;
		}
		return ai == ni;
	}
	,onKey: function(key) {
		switch(key) {
		case "esc":
			this.callback("escape");
			break;
		case "tab":
			if(djTui_WM._TAB_LEVEL == 0) {
				return;
			}
			if(this.activeIsLastFocusable()) {
				if(this.flag_lock_focus) {
					this.focusNext(true);
				} else if(djTui_WM._TAB_TYPE == "exit") {
					this.callback_wm("focus_next",this);
				} else {
					this.focusNext(true);
				}
			} else {
				this.focusNext(true);
			}
			break;
		default:
			if(this.active == null) {
				return;
			}
			if(!this.active.flag_lock_focus) {
				if(key == "up" && this.focusPrev()) {
					return;
				}
				if(key == "down" && this.focusNext()) {
					return;
				}
				if(key == "home" || key == "pageup") {
					djTui_BaseElement.focusNext(this.display_list,null,false);
					return;
				}
				if(key == "end" || key == "pagedown") {
					djTui_BaseElement.focusPrev(this.display_list,null,false);
					return;
				}
			}
			if(key == "backsp" && this.flag_close_on_bksp) {
				this.close();
				return;
			}
			this.active.onKey(key);
		}
	}
	,onElementCallback: function(st,el) {
		if(djTui_WM.onElementCallback != null) {
			djTui_WM.onElementCallback(st,el);
		}
		if(st == "focus") {
			if(this.active != null) {
				this.active.unfocus();
			}
			this.active_last = this.active;
			this.active = el;
		}
		this.callback(st,el);
	}
	,set_style: function(val) {
		if(this.style == val) {
			return val;
		}
		this.style = val;
		this.setColor(null,this.style.text,this.style.bg);
		this.border_el.setColor(this.style.borderColor);
		this.set_borderStyle(this.style.borderStyle);
		return this.style;
	}
	,set_borderStyle: function(val) {
		this.borderStyle = val;
		if(this.borderStyle > djTui_Styles.border.length - 1) {
			this.borderStyle = 1;
		}
		this.border_el.style = this.borderStyle;
		this.style.borderStyle = this.borderStyle;
		if(this.visible && !this.lockDraw) {
			this.border_el.draw();
			if(this.title_el != null) {
				this.title_el.draw();
			}
		}
		this.padding(this.rPadX,this.rPadY);
		return val;
	}
	,set_visible: function(val) {
		if(this.visible != val) {
			var _g = 0;
			var _g1 = this.display_list;
			while(_g < _g1.length) {
				var el = _g1[_g];
				++_g;
				el.set_visible(val);
			}
		}
		return this.visible = val;
	}
	,get_inWidth: function() {
		return this.width - this.padX - this.padX | 0;
	}
	,get_inHeight: function() {
		return this.height - this.padY - this.padY | 0;
	}
	,__class__: djTui_Window
	,__properties__: $extend(djTui_BaseElement.prototype.__properties__,{get_inHeight:"get_inHeight",get_inWidth:"get_inWidth",set_style:"set_style",set_borderStyle:"set_borderStyle"})
});
var djTui_WindowState = function(sid,windows) {
	this.SID = sid;
	if(windows != null) {
		this.list = windows;
	} else {
		this.list = [];
	}
};
djTui_WindowState.__name__ = true;
djTui_WindowState.prototype = {
	close: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			w.close();
		}
		if(this.lastBgColor != null) {
			djTui_WM.set_backgroundColor(this.lastBgColor);
			this.lastBgColor = null;
		}
	}
	,open: function(data) {
		if(this.bgColor != null) {
			this.lastBgColor = djTui_WM.backgroundColor;
			djTui_WM.set_backgroundColor(this.bgColor);
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			w.open();
		}
		djTui_BaseElement.focusNext(this.list,null);
	}
	,__class__: djTui_WindowState
};
var djTui_WindowStateManager = function() {
	this.clear();
};
djTui_WindowStateManager.__name__ = true;
djTui_WindowStateManager.prototype = {
	close: function() {
		if(this.current != null) {
			this.current.close();
			this.onStateClose(this.current);
			this.current = null;
		}
	}
	,'goto': function(stateSID,data) {
		var _this = this.states;
		var b = __map_reserved[stateSID] != null ? _this.getReserved(stateSID) : _this.h[stateSID];
		if(b == null) {
			return;
		}
		this.open(b);
	}
	,open: function(st) {
		this.close();
		this.onStateOpen(st);
		st.open();
		this.current = st;
	}
	,onStateOpen: function(st) {
	}
	,onStateClose: function(st) {
	}
	,clear: function() {
		this.states = new haxe_ds_StringMap();
		this.current = null;
	}
	,handleESC: function() {
		if(this.current != null && this.current.onEscGoto != null) {
			this["goto"](this.current.onEscGoto);
			return true;
		}
		return false;
	}
	,__class__: djTui_WindowStateManager
};
var djTui_adaptors_IInput = function() { };
djTui_adaptors_IInput.__name__ = true;
djTui_adaptors_IInput.prototype = {
	__class__: djTui_adaptors_IInput
};
var djTui_adaptors_ITerminal = function() { };
djTui_adaptors_ITerminal.__name__ = true;
djTui_adaptors_ITerminal.prototype = {
	__class__: djTui_adaptors_ITerminal
};
var djTui_adaptors_djNode_InputObj = function() {
};
djTui_adaptors_djNode_InputObj.__name__ = true;
djTui_adaptors_djNode_InputObj.__interfaces__ = [djTui_adaptors_IInput];
djTui_adaptors_djNode_InputObj.prototype = {
	_onKey: function(k) {
		var code = djNode_Keycode.toKeyCodeID(k);
		if(code != null) {
			var tmp;
			switch(code[1]) {
			case 0:
				tmp = "up";
				break;
			case 1:
				tmp = "down";
				break;
			case 2:
				tmp = "left";
				break;
			case 3:
				tmp = "right";
				break;
			case 4:
				tmp = "home";
				break;
			case 7:
				tmp = "end";
				break;
			case 8:
				tmp = "pageup";
				break;
			case 9:
				tmp = "pagedown";
				break;
			case 10:
				tmp = "backsp";
				break;
			case 11:
				tmp = "tab";
				break;
			case 12:
				tmp = "enter";
				break;
			case 13:
				tmp = "space";
				break;
			case 14:
				tmp = "esc";
				break;
			case 17:
				tmp = "F1";
				break;
			case 18:
				tmp = "F2";
				break;
			case 19:
				tmp = "F3";
				break;
			case 20:
				tmp = "F4";
				break;
			case 21:
				tmp = "F5";
				break;
			default:
				tmp = "";
			}
			this.onKey(tmp);
		} else {
			this.onKey(k);
		}
	}
	,start: function() {
		djNode_Keyboard.startCapture(true,$bind(this,this._onKey));
	}
	,__class__: djTui_adaptors_djNode_InputObj
};
var djTui_adaptors_djNode_TerminalObj = function() {
	this.t = djNode_BaseApp.TERMINAL;
	this.MAX_WIDTH = this.t.getWidth();
	this.MAX_HEIGHT = this.t.getHeight();
};
djTui_adaptors_djNode_TerminalObj.__name__ = true;
djTui_adaptors_djNode_TerminalObj.__interfaces__ = [djTui_adaptors_ITerminal];
djTui_adaptors_djNode_TerminalObj.prototype = {
	print: function(s) {
		process.stdout.write(s);
		return this;
	}
	,move: function(x,y) {
		this.t.move(x + 1,y + 1);
		return this;
	}
	,moveR: function(x,y) {
		if(x > 0) {
			process.stdout.write("\x1B[" + x + "C");
		} else if(x < 0) {
			process.stdout.write("\x1B[" + -x + "D");
		}
		if(y > 0) {
			process.stdout.write("\x1B[" + y + "B");
		} else if(y < 0) {
			process.stdout.write("\x1B[" + -y + "A");
		}
		return this;
	}
	,fg: function(col) {
		this.t.fg(col);
		return this;
	}
	,bg: function(col) {
		this.t.bg(col);
		return this;
	}
	,reset: function() {
		process.stdout.write("\x1B[0m");
		return this;
	}
	,__class__: djTui_adaptors_djNode_TerminalObj
};
var djTui_el_BaseMenuItem = function(sid) {
	this.s_padOut = 0;
	this.s_padIn = 0;
	this.disabled = false;
	djTui_BaseElement.call(this,sid);
	this.textAlign = "center";
	this.textWidth = 0;
};
djTui_el_BaseMenuItem.__name__ = true;
djTui_el_BaseMenuItem.__super__ = djTui_BaseElement;
djTui_el_BaseMenuItem.prototype = $extend(djTui_BaseElement.prototype,{
	onAdded: function() {
		if(this.color_idle == null) {
			this.color_idle = this.parent.style.elem_idle;
		}
		if(this.color_focus == null) {
			this.color_focus = this.parent.style.elem_focus;
		}
		if(this.disabled == true) {
			this.set_disabled(true);
		}
	}
	,focusSetup: function(focus) {
		if(focus) {
			this.setColor(this.color_focus);
		} else {
			this.setColor(this.color_idle);
		}
	}
	,colorIdle: function(fg,bg) {
		this.color_idle = { fg : fg, bg : bg};
		this.colorChangeDraw();
		return this;
	}
	,colorChangeDraw: function() {
		if(this.parent != null) {
			this.focusSetup(this.isFocused);
			if(this.visible && !this.lockDraw) {
				this.draw();
			}
		}
	}
	,draw: function() {
		djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
		djTui_WM.T.move(this.x,this.y).print(this.rText);
	}
	,set_text: function(v) {
		if(v == null) {
			v = "";
		}
		this.text = v;
		if(this.s_smb_l != null) {
			v = this.s_smb_l + djTui_StrTool.empty(this.s_padIn) + v + djTui_StrTool.empty(this.s_padIn) + this.s_smb_r;
		}
		if(this.s_padOut > 0) {
			v = djTui_StrTool.empty(this.s_padOut) + v + djTui_StrTool.empty(this.s_padOut);
		}
		if(this.rText != null && this.textWidth == 0 && (js_Boot.__cast(v , String)).length < this.rText.length && this.visible) {
			this.clear();
		}
		if(this.textWidth == 0) {
			this.rText = v;
		} else {
			this.rText = djTui_StrTool.padString(v,this.textWidth,this.textAlign);
		}
		this.width = this.rText.length;
		if(this.visible && !this.lockDraw) {
			this.draw();
		}
		return this.text;
	}
	,set_disabled: function(val) {
		this.disabled = val;
		if(!this.disabled) {
			this.flag_focusable = true;
		}
		if(this.parent != null) {
			var s = this.parent.style;
			if(this.disabled) {
				this.color_focus = s.elem_disable_f;
				this.color_idle = s.elem_disable_i;
			} else {
				this.color_idle = s.elem_idle;
				this.color_focus = s.elem_focus;
			}
			this.colorChangeDraw();
		}
		return val;
	}
	,setSideSymbolPad: function(_out,_in) {
		this.s_padIn = _in;
		this.s_padOut = _out;
		if(this.text != null) {
			this.set_text(this.text);
		}
		return this;
	}
	,setSideSymbols: function(l,r) {
		if(r == null) {
			r = " ";
		}
		if(l == null) {
			l = " ";
		}
		this.s_smb_l = l;
		this.s_smb_r = r;
	}
	,__class__: djTui_el_BaseMenuItem
	,__properties__: $extend(djTui_BaseElement.prototype.__properties__,{set_disabled:"set_disabled",set_text:"set_text"})
});
var djTui_el_Border = function(sid,st) {
	if(st == null) {
		st = 0;
	}
	djTui_BaseElement.call(this,sid);
	this.flag_focusable = false;
	this.style = st;
};
djTui_el_Border.__name__ = true;
djTui_el_Border.__super__ = djTui_BaseElement;
djTui_el_Border.prototype = $extend(djTui_BaseElement.prototype,{
	draw: function() {
		djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
		djTui_WM.D.border(this.x,this.y,this.width,this.height,this.style);
	}
	,__class__: djTui_el_Border
});
var djTui_el_Button = function(sid,Text,BtnStyle,Width) {
	if(Width == null) {
		Width = 0;
	}
	if(BtnStyle == null) {
		BtnStyle = 0;
	}
	this.flag_leftright_escape = false;
	djTui_el_BaseMenuItem.call(this,sid);
	this.type = djTui_ElementType.button;
	this.height = 1;
	this.textWidth = Width;
	if(BtnStyle > 0) {
		var s = BtnStyle - 1;
		this.setSideSymbolPad(1,1);
		this.setSideSymbols(djTui_el_Button.SMB[s].charAt(0),djTui_el_Button.SMB[s].charAt(1));
	}
	this.set_text(Text);
	if(sid != null) {
		if(["#","@"].indexOf(sid.charAt(0)) >= 0) {
			this.extra(sid);
		}
	}
};
djTui_el_Button.__name__ = true;
djTui_el_Button.__super__ = djTui_el_BaseMenuItem;
djTui_el_Button.prototype = $extend(djTui_el_BaseMenuItem.prototype,{
	extra: function(tags) {
		var ar = tags.split(",");
		if(this.xtr == null) {
			this.xtr = { };
		}
		var _g = 0;
		while(_g < ar.length) {
			var i = ar[_g];
			++_g;
			var c0 = i.charAt(0);
			var c1 = HxOverrides.substr(i,1,null);
			switch(c0) {
			case "#":
				this.xtr.call = 0;
				this.xtr.sid = c1;
				break;
			case "?":
				this.xtr.conf = true;
				this.xtr.confQ = c1;
				if(djTui_Tools.isEmpty(this.xtr.confQ)) {
					this.xtr.confQ = djTui_el_Button.CONF_DEF;
				}
				break;
			case "@":
				this.xtr.call = 1;
				this.xtr.sid = c1;
				break;
			case "x":
				this.xtr.x = Std.parseInt(c1);
				break;
			case "y":
				this.xtr.y = Std.parseInt(c1);
				break;
			default:
				switch(i) {
				case "anim":
					this.xtr.anim = true;
					break;
				case "center":
					this.xtr.center = true;
					break;
				case "close":
					this.xtr.close = true;
					break;
				default:
				}
			}
		}
		return this;
	}
	,action: function() {
		if(this.xtr != null) {
			if(this.xtr.call != null && this.xtr.call == 0) {
				djTui_WM.STATE["goto"](this.xtr.sid);
				return;
			}
			if(this.xtr.close != null) {
				this.parent.close();
			}
			if(this.xtr.call != null && this.xtr.call == 1) {
				var key = this.xtr.sid;
				var _this = djTui_WM.DB;
				var win = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(win != null) {
					if(this.xtr.x != null && this.xtr.y != null) {
						win.pos(this.xtr.x,this.xtr.y);
					} else if(this.xtr.center != null) {
						djTui_WM.A.screen(win);
					}
					if(this.xtr.anim != null) {
						win.openAnimated();
					} else {
						win.open(true);
					}
				}
			}
		}
		this.callback("fire");
		if(this.extra_onPush != null) {
			this.extra_onPush();
		}
	}
	,onKey: function(k) {
		if((k == "enter" || k == "space") && !this.disabled) {
			if(this.xtr != null && this.xtr.conf != null) {
				djTui_WM.popupConfirm($bind(this,this.action),this.xtr.confQ,this.xtr.center == null ? [this.x,this.y + 1] : null);
			} else {
				this.action();
			}
		} else if(this.flag_leftright_escape) {
			if(k == "left") {
				this.parent.focusPrev();
			} else if(k == "right") {
				this.parent.focusNext();
			}
		}
	}
	,__class__: djTui_el_Button
});
var djTui_el_Label = function(Text,TextWidth,Align) {
	if(Align == null) {
		Align = "left";
	}
	if(TextWidth == null) {
		TextWidth = 0;
	}
	if(Text == null) {
		Text = "";
	}
	djTui_el_BaseMenuItem.call(this);
	this.type = djTui_ElementType.label;
	this.flag_focusable = false;
	this.textWidth = TextWidth;
	this.textAlign = Align;
	this.height = 1;
	this.set_text(Text);
	this.anim_blink = false;
	this.anim_scroll = 0;
};
djTui_el_Label.__name__ = true;
djTui_el_Label.__super__ = djTui_el_BaseMenuItem;
djTui_el_Label.prototype = $extend(djTui_el_BaseMenuItem.prototype,{
	setSID: function(s) {
		this.SID = s;
		return this;
	}
	,onAdded: function() {
		djTui_el_BaseMenuItem.prototype.onAdded.call(this);
		if(this.colorFG == null) {
			this.setColor(null,this.parent.colorFG);
		} else if(this.colorBG == null) {
			this.colorBG = this.parent.colorBG;
		}
	}
	,scroll: function(freq) {
		if(freq == null) {
			freq = 200;
		}
		var _gthis = this;
		this.stop();
		var f = $bind(this,this.scroll);
		var a1 = freq;
		this.anim_active_call = function() {
			return f(a1);
		};
		if(!this.visible) {
			return this;
		}
		this.timer = new haxe_Timer(freq);
		this.timer.run = function() {
			_gthis.anim_scroll++;
			if(_gthis.anim_scroll >= _gthis.text.length) {
				_gthis.anim_scroll = 0;
			}
			var s = 0;
			var ar = [];
			while(s < _gthis.width) {
				ar[s] = _gthis.text.charAt((_gthis.anim_scroll + s) % _gthis.text.length);
				++s;
			}
			_gthis.rText = ar.join("");
			_gthis.draw();
		};
		this.timer.run();
		return this;
	}
	,stop: function() {
		this.anim_active_call = null;
		if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
	}
	,set_visible: function(val) {
		if(this.visible == val) {
			return val;
		}
		this.visible = val;
		if(this.visible) {
			if(this.anim_active_call != null) {
				this.anim_active_call();
			}
		} else if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
		return val;
	}
	,set_text: function(val) {
		djTui_el_BaseMenuItem.prototype.set_text.call(this,val);
		if(val == null) {
			return null;
		}
		if(this.visible) {
			if(this.anim_active_call != null) {
				this.anim_active_call();
			}
		}
		return this.text;
	}
	,__class__: djTui_el_Label
});
var djTui_el_ScrollBar = function(_height) {
	if(_height == null) {
		_height = 8;
	}
	this.scroll_ratio = 0;
	djTui_BaseElement.call(this);
	this.height = _height;
	this.flag_focusable = false;
};
djTui_el_ScrollBar.__name__ = true;
djTui_el_ScrollBar.__super__ = djTui_BaseElement;
djTui_el_ScrollBar.prototype = $extend(djTui_BaseElement.prototype,{
	onAdded: function() {
		djTui_BaseElement.prototype.onAdded.call(this);
		if(this.colorFG == null) {
			this.setColor(this.parent.style.scrollbar_idle);
		}
	}
	,set_scroll_ratio: function(val) {
		if(this.scroll_ratio == val) {
			return val;
		}
		this.scroll_ratio = val;
		if(this.scroll_ratio < 0) {
			this.scroll_ratio = 0;
		} else if(this.scroll_ratio > 1) {
			this.scroll_ratio = 1;
		}
		if(this.visible && !this.lockDraw) {
			this.draw();
		}
		return this.scroll_ratio;
	}
	,draw: function() {
		djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) djTui_WM.T.move(this.x,this.y + _g1++).print(djTui_el_ScrollBar.SYMBOL_BAR);
		var pos = Math.ceil(this.height * this.scroll_ratio) - 1;
		if(pos < 0) {
			pos = 0;
		}
		djTui_WM.T.move(this.x,this.y + pos).print(djTui_el_ScrollBar.SYMBOL_IND);
	}
	,__class__: djTui_el_ScrollBar
	,__properties__: $extend(djTui_BaseElement.prototype.__properties__,{set_scroll_ratio:"set_scroll_ratio"})
});
var djTui_el_TextBox = function(sid,_width,_height) {
	if(_height == null) {
		_height = 0;
	}
	this.flag_scrollbar_autohide = true;
	this.flag_add_scrollbar = false;
	djTui_BaseElement.call(this,sid);
	this.type = djTui_ElementType.textbox;
	this.size(_width - 1,_height);
	this.slots_count = this.height;
	this.reset();
	this.flag_lock_focus = true;
};
djTui_el_TextBox.__name__ = true;
djTui_el_TextBox.__super__ = djTui_BaseElement;
djTui_el_TextBox.prototype = $extend(djTui_BaseElement.prototype,{
	onKey: function(k) {
		if(this.flag_empty) {
			if(k == "up") {
				this.parent.focusPrev();
			} else if(k == "down") {
				this.parent.focusNext();
			}
			return;
		}
		switch(k) {
		case "down":
			if(this.scroll_offset == this.scroll_max) {
				this.parent.focusNext();
			} else {
				this.scrollDown();
			}
			break;
		case "end":
			this.scrollBottom();
			break;
		case "home":
			this.scrollTop();
			break;
		case "left":
			this.parent.focusPrev();
			break;
		case "pagedown":
			this.scrollPageDown();
			break;
		case "pageup":
			this.scrollPageUp();
			break;
		case "right":
			this.parent.focusNext();
			break;
		case "up":
			if(this.scroll_offset == 0) {
				this.parent.focusPrev();
			} else {
				this.scrollUp();
			}
			break;
		default:
		}
	}
	,onAdded: function() {
		if(this.colorFG == null) {
			this.setColor(this.parent.style.textbox);
		}
		if(this.flag_add_scrollbar) {
			this.addScrollbar();
		}
	}
	,focusSetup: function(focus) {
		if(this.parent.style.textbox_focus != null) {
			if(focus) {
				this.setColor(this.parent.style.textbox_focus);
			} else {
				this.setColor(this.parent.style.textbox);
			}
		}
		if(this.scrollbar != null) {
			if(this.flag_scrollbar_autohide && !focus) {
				this.scrollbar.setColor(null,this.colorBG,this.colorBG);
				this.scrollbar.draw();
			} else if(this.parent.style.scrollbar_focus != null) {
				if(focus) {
					this.scrollbar.setColor(this.parent.style.scrollbar_focus);
				} else {
					this.scrollbar.setColor(this.parent.style.scrollbar_idle);
				}
				this.scrollbar.draw();
			}
		}
	}
	,draw: function() {
		djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
		var j = 0;
		while(true) {
			if(this.lines[j + this.scroll_offset] != null) {
				this.drawSlotIndex(j);
			} else {
				djTui_WM.D.rect(this.x,this.y + j,this.width,this.slots_count - j);
				break;
			}
			if(!(++j < this.slots_count)) {
				break;
			}
		}
	}
	,drawSlotIndex: function(i) {
		djTui_WM.T.move(this.x,this.y + i).print(this.lines[i + this.scroll_offset]);
	}
	,addScrollbar: function() {
		if(this.scrollbar != null) {
			return;
		}
		if(this.parent == null) {
			this.flag_add_scrollbar = true;
			return;
		}
		this.scrollbar = new djTui_el_ScrollBar(this.height);
		this.scrollbar.posNext(this);
		this.parent.addChild(this.scrollbar);
		this.focusSetup(this.isFocused);
		this.flag_add_scrollbar = false;
	}
	,setData: function(val) {
		this.reset();
		var src;
		if(typeof(val) == "string") {
			src = djTui_StrTool.splitToLines(val,this.width);
		} else if((val instanceof Array) && val.__enum__ == null) {
			src = val;
		} else {
			throw new js__$Boot_HaxeError("Unsupported Data Type for Textbox");
		}
		var _g = 0;
		while(_g < src.length) {
			var i = src[_g];
			++_g;
			this.lines.push(djTui_StrTool.padString(i,this.width));
		}
		if(this.height == 0) {
			this.height = src.length;
			this.slots_count = this.height;
		}
		this.scroll_max = this.lines.length - this.slots_count;
		if(this.scroll_max < 0) {
			this.scroll_max = 0;
		}
		if(this.scroll_max > 0) {
			this.addScrollbar();
		}
		this.flag_empty = this.lines.length == 0;
		if(this.visible && !this.lockDraw) {
			this.draw();
		}
	}
	,set_scroll_offset: function(val) {
		if(val < 0) {
			val = 0;
		}
		if(val > this.scroll_max) {
			val = this.scroll_max;
		}
		this.scroll_offset = val;
		this.scroll_ratio = this.scroll_offset / this.scroll_max;
		if(this.scrollbar != null) {
			this.scrollbar.set_scroll_ratio(this.scroll_ratio);
		}
		if(this.visible && !this.lockDraw) {
			this.draw();
		}
		this.callback("scroll");
		return val;
	}
	,reset: function() {
		this.lines = [];
		this.set_scroll_offset(0);
		this.scroll_ratio = 0;
		this.flag_empty = true;
		if(this.scrollbar != null) {
			this.parent.removeChild(this.scrollbar);
			this.scrollbar.clear();
			this.scrollbar = null;
		}
		if(this.visible) {
			this.draw();
		}
	}
	,scrollUp: function() {
		var _g = this;
		_g.set_scroll_offset(_g.scroll_offset - 1);
	}
	,scrollDown: function() {
		var _g = this;
		_g.set_scroll_offset(_g.scroll_offset + 1);
	}
	,scrollPageUp: function() {
		var _g = this;
		_g.set_scroll_offset(_g.scroll_offset - Math.floor(this.slots_count / 2));
	}
	,scrollPageDown: function() {
		var _g = this;
		_g.set_scroll_offset(_g.scroll_offset + Math.floor(this.slots_count / 2));
	}
	,scrollTop: function() {
		this.set_scroll_offset(0);
	}
	,scrollBottom: function() {
		this.set_scroll_offset(this.scroll_max);
	}
	,__class__: djTui_el_TextBox
	,__properties__: $extend(djTui_BaseElement.prototype.__properties__,{set_scroll_offset:"set_scroll_offset"})
});
var djTui_el_VList = function(sid,_width,_slots) {
	this.flag_ghost_active = false;
	this.flag_letter_jump = false;
	this.scrollPad = 1;
	djTui_el_TextBox.call(this,sid,_width,_slots);
	this.type = djTui_ElementType.vlist;
	this.flag_focusable = true;
};
djTui_el_VList.__name__ = true;
djTui_el_VList.__super__ = djTui_el_TextBox;
djTui_el_VList.prototype = $extend(djTui_el_TextBox.prototype,{
	onAdded: function() {
		djTui_el_TextBox.prototype.onAdded.call(this);
		if(this.scrollPad > Math.floor(this.slots_count / 2) - 1) {
			this.scrollPad = Math.floor(this.slots_count / 2) - 1;
		}
		if(this.color_cursor == null) {
			this.color_cursor = this.parent.style.vlist_cursor;
		}
	}
	,draw: function() {
		djTui_el_TextBox.prototype.draw.call(this);
		if(this.isFocused && !this.flag_empty) {
			this.cursor_draw();
		}
		if(!this.isFocused && this.flag_ghost_active) {
			djTui_WM.T.reset().fg(this.parent.style.elem_disable_f.fg).bg(this.parent.style.elem_disable_f.bg);
			this.drawSlotIndex(this.index_slot);
		}
	}
	,onKey: function(k) {
		if(this.flag_empty) {
			djTui_el_TextBox.prototype.onKey.call(this,k);
			return;
		}
		switch(k) {
		case "down":
			if(this.index == this.get_index_max()) {
				this.parent.focusNext();
			} else {
				this.cursor_down();
			}
			break;
		case "end":
			this.cursor_bottom();
			break;
		case "enter":
			this.callback("fire");
			if(this.onSelect != null) {
				this.onSelect(this.index);
			}
			break;
		case "home":
			this.cursor_top();
			break;
		case "left":
			this.parent.focusPrev();
			break;
		case "pagedown":
			this.cursor_pageDown();
			break;
		case "pageup":
			this.cursor_pageUp();
			break;
		case "right":
			this.parent.focusNext();
			break;
		case "space":
			this.callback("fire");
			if(this.onSelect != null) {
				this.onSelect(this.index);
			}
			break;
		case "up":
			if(this.index == 0) {
				this.parent.focusPrev();
			} else {
				this.cursor_up();
			}
			break;
		default:
			if(!this.flag_letter_jump) {
				return;
			}
			k = k.toUpperCase();
			if(this.lines[this.index].charAt(0).toUpperCase() == k) {
				if(this.lines[this.index + 1] != null && this.lines[this.index + 1].charAt(0).toUpperCase() == k) {
					this.cursor_down();
					return;
				}
			}
			var x = 0;
			while(true) {
				if(this.lines[x].charAt(0).toUpperCase() == k) {
					this.cursor_to(x);
					return;
				}
				if(!(++x < this.lines.length)) {
					break;
				}
			}
		}
	}
	,reset: function() {
		djTui_el_TextBox.prototype.reset.call(this);
		this.index = 0;
		this.index_slot = 0;
	}
	,cursor_to: function(val) {
		if(val == this.index) {
			return;
		}
		if(this.scrollbar != null) {
			this.scrollbar.lockDraw = true;
		}
		this.lockDraw = true;
		this.cursor_top();
		while(this.index < val) this.cursor_down();
		this.lockDraw = false;
		if(this.visible) {
			this.draw();
		}
		if(this.scrollbar != null) {
			this.scrollbar.lockDraw = false;
			if(this.visible) {
				this.scrollbar.draw();
			}
		}
	}
	,cursor_draw: function() {
		if(!this.lockDraw) {
			djTui_WM.T.reset().fg(this.color_cursor.fg).bg(this.color_cursor.bg);
			this.drawSlotIndex(this.index_slot);
		}
	}
	,draw_current_slot_unfocused: function() {
		if(!this.lockDraw) {
			djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
			this.drawSlotIndex(this.index_slot);
		}
	}
	,cursor_up: function() {
		if(this.index == 0) {
			return;
		}
		this.index--;
		if(this.index_slot <= this.scrollPad && this.scroll_offset > 0) {
			this.scrollUp();
			this.cursor_draw();
		} else {
			this.draw_current_slot_unfocused();
			this.index_slot--;
			this.cursor_draw();
		}
		this.callback("change");
	}
	,cursor_down: function() {
		if(this.index == this.get_index_max()) {
			return;
		}
		this.index++;
		if(this.index_slot >= this.slots_count - this.scrollPad - 1 && this.scroll_offset < this.scroll_max) {
			this.scrollDown();
			this.cursor_draw();
		} else {
			this.draw_current_slot_unfocused();
			this.index_slot++;
			this.cursor_draw();
		}
		this.callback("change");
	}
	,cursor_top: function() {
		if(this.index == 0) {
			return;
		}
		this.index = 0;
		if(this.scroll_offset == 0) {
			this.draw_current_slot_unfocused();
			this.index_slot = 0;
			this.cursor_draw();
		} else {
			this.index_slot = 0;
			this.scrollTop();
		}
		this.callback("change");
	}
	,cursor_bottom: function() {
		if(this.index == this.get_index_max()) {
			return;
		}
		this.index = this.get_index_max();
		if(this.scroll_offset == this.scroll_max) {
			this.draw_current_slot_unfocused();
			if(this.lines.length < this.slots_count) {
				this.index_slot = this.get_index_max();
			} else {
				this.index_slot = this.slots_count - 1;
			}
			this.cursor_draw();
		} else {
			this.index_slot = this.slots_count - 1;
			this.scrollBottom();
		}
		this.callback("change");
	}
	,cursor_pageUp: function() {
		if(this.index == 0) {
			return;
		}
		if(this.index_slot > this.scrollPad && this.scroll_offset > 0) {
			this.draw_current_slot_unfocused();
			this.index_slot = this.scrollPad;
			this.index = this.scroll_offset + this.index_slot;
			this.cursor_draw();
		} else {
			if(this.scroll_offset == 0) {
				this.cursor_top();
				return;
			}
			this.index_slot = this.scrollPad;
			this.scrollPageUp();
			this.index = this.scroll_offset + this.index_slot;
		}
		this.callback("change");
	}
	,cursor_pageDown: function() {
		if(this.index == this.get_index_max()) {
			return;
		}
		if(this.index_slot < this.slots_count - this.scrollPad - 1 && this.scroll_offset < this.scroll_max) {
			this.draw_current_slot_unfocused();
			this.index_slot = this.slots_count - this.scrollPad - 1;
			this.index = this.scroll_offset + this.index_slot;
			this.cursor_draw();
		} else {
			if(this.scroll_offset == this.scroll_max) {
				this.cursor_bottom();
				return;
			}
			this.index_slot = this.slots_count - 1 - this.scrollPad;
			this.scrollPageDown();
			this.index = this.scroll_offset + this.index_slot;
		}
		this.callback("change");
	}
	,get_index_max: function() {
		return this.lines.length - 1;
	}
	,__class__: djTui_el_VList
	,__properties__: $extend(djTui_el_TextBox.prototype.__properties__,{get_index_max:"get_index_max"})
});
var djTui_win_MenuBar = function(Sid,Width,PadX) {
	if(PadX == null) {
		PadX = 0;
	}
	if(Width == null) {
		Width = 1;
	}
	this._gStyle = 0;
	this._bStyle = 0;
	this._bFixSize = 0;
	djTui_Window.call(this,Sid,Width,1);
	this.padX = PadX;
	this.setPanelStyle(this.style.text,this.style.bg);
	this.setItemStyle();
};
djTui_win_MenuBar.__name__ = true;
djTui_win_MenuBar.__super__ = djTui_Window;
djTui_win_MenuBar.prototype = $extend(djTui_Window.prototype,{
	setItemStyle: function(Align,FixedSize,SymbolID,pad0,pad1,padBetween) {
		if(padBetween == null) {
			padBetween = 1;
		}
		if(pad1 == null) {
			pad1 = 1;
		}
		if(pad0 == null) {
			pad0 = 1;
		}
		if(SymbolID == null) {
			SymbolID = 0;
		}
		if(FixedSize == null) {
			FixedSize = 0;
		}
		if(Align == null) {
			Align = "left";
		}
		this.menuAlign = Align;
		this._bFixSize = FixedSize;
		this._bStyle = SymbolID;
		this._bPad0 = pad0;
		this._bPad1 = pad1;
		this._bPad2 = padBetween;
	}
	,setPanelStyle: function(col1,col0,Gstyle) {
		if(Gstyle == null) {
			Gstyle = -1;
		}
		this._gStyle = Gstyle;
		if(Gstyle == -1) {
			this.padY = 0;
			this.height = 1;
		} else {
			this.padY = 1;
			this.height = 3;
			if(Gstyle > 0 && this.padX == 0) {
				this.padX = 1;
			}
		}
		this.modifyStyle({ borderStyle : 0, bg : col0, elem_idle : { fg : col1}, elem_focus : { fg : col0, bg : col1}});
	}
	,setItems: function(ar) {
		if(ar == null) {
			return this;
		}
		this.currentIndex = 0;
		if(this.items != null) {
			this.lockDraw = true;
			var _g = 0;
			var _g1 = this.items;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				this.removeChild(i);
			}
			this.lastAdded = null;
			this.lockDraw = false;
		}
		this.items = [];
		this._gSizes = [];
		var totalW = 0;
		var i1 = 0;
		while(i1 < ar.length) {
			var b = new djTui_el_Button("" + i1,ar[i1],this._bStyle,this._bFixSize);
			b.setSideSymbolPad(this._bPad0,this._bPad1);
			this.items.push(b);
			++i1;
			this._gSizes.push(b.width + this._bPad2);
			totalW += b.width + this._bPad2;
		}
		this._gSizes[0]++;
		this._gSizes.push(this.height);
		totalW -= this._bPad2;
		if(totalW + this.padX * 2 > this.width) {
			this.width = totalW + this.padX * 2;
		}
		this.addStackInline(this.items,0,this._bPad2,this.menuAlign);
		return this;
	}
	,onElementCallback: function(st,el) {
		djTui_Window.prototype.onElementCallback.call(this,st,el);
		if(st == "fire" && this.onSelect != null) {
			this.onSelect(this.currentIndex);
		} else if(st == "focus") {
			this.currentIndex = Std.parseInt(el.SID);
			if(this._gStyle == 0) {
				this.drawThick(this.active);
			}
			if(this.onChange != null) {
				this.onChange(this.currentIndex);
			}
		} else if(st == "unfocus") {
			if(this._gStyle == 0) {
				this.drawThick(this.items[Std.parseInt(el.SID)]);
			}
		}
	}
	,draw: function() {
		djTui_Window.prototype.draw.call(this);
		if(this._gStyle > 0) {
			djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
			djTui_WM.D.drawGrid(this.items[0].x - 1,this.y,null,[this._gSizes.slice()],this._gStyle,this._gStyle);
		}
	}
	,drawThick: function(el) {
		djTui_WM.T.bg(el.colorBG);
		djTui_WM.D.rect(el.x,el.y + 1,el.width,1);
		djTui_WM.D.rect(el.x,el.y - 1,el.width,1);
	}
	,__class__: djTui_win_MenuBar
});
var djTui_win_MessageBox = function(text,_type,_resCallback,_width,_style) {
	if(_width == null) {
		_width = 30;
	}
	this.flag_auto_close = true;
	if(_style == null) {
		_style = djTui_WM.global_style_pop;
	}
	djTui_Window.call(this,null,null,null,_style);
	this.mbType = _type;
	this.resultCallback = _resCallback;
	this.flag_lock_focus = true;
	this.padding(1,0);
	this.tbox = new djTui_el_TextBox(null,_width - this.padX * 2,0);
	this.tbox.setData(text);
	this.tbox.flag_focusable = false;
	this.buttons = [];
	switch(this.mbType) {
	case 0:
		this.add_b("OK");
		break;
	case 1:
		this.add_b("OK");
		this.add_b("CANCEL");
		break;
	case 2:
		this.add_b("YES");
		this.add_b("NO");
		break;
	case 3:
		break;
	default:
	}
	this.size(_width,this.tbox.height + 5);
	this.addStack(this.tbox,1);
	this.addStackInline(this.buttons,1,3,"center");
	if(djTui_win_MessageBox.FOCUS_LAST && this.lastAdded != null) {
		this.hack_always_focus_this = this.lastAdded.SID;
	}
};
djTui_win_MessageBox.__name__ = true;
djTui_win_MessageBox.create = function(text,_type,_resCallback,_width,_style,animated) {
	if(animated == null) {
		animated = false;
	}
	if(_width == null) {
		_width = 30;
	}
	var m = new djTui_win_MessageBox(text,_type,_resCallback,_width,_style);
	djTui_WM.A.screen(m);
	if(animated) {
		m.openAnimated();
	} else {
		m.open(true);
	}
	return m;
};
djTui_win_MessageBox.__super__ = djTui_Window;
djTui_win_MessageBox.prototype = $extend(djTui_Window.prototype,{
	onElementCallback: function(st,el) {
		djTui_Window.prototype.onElementCallback.call(this,st,el);
		if(st == "fire") {
			if(this.flag_auto_close) {
				this.close();
			}
			if(this.resultCallback != null) {
				this.resultCallback(this.buttons.indexOf(el));
			}
		}
	}
	,add_b: function(name) {
		var b = new djTui_el_Button(null,name,djTui_win_MessageBox.BUTTON_STYLE);
		b.flag_leftright_escape = true;
		this.buttons.push(b);
	}
	,__class__: djTui_win_MessageBox
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var hxconf_ConfigFile = function() {
	this.settings = new haxe_ds_StringMap();
};
hxconf_ConfigFile.__name__ = true;
hxconf_ConfigFile.prototype = {
	read: function(contents) {
		var lines = contents.split("\n");
		var currentSection = "";
		var lastDef = null;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			line = StringTools.trim(line);
			if(line.length == 0) {
				continue;
			}
			if(hxconf_ConfigFile.comment.match(line)) {
				continue;
			} else if(hxconf_ConfigFile.section.match(line)) {
				currentSection = hxconf_ConfigFile.section.matched(1);
			} else if(hxconf_ConfigFile.def.match(line)) {
				var _this = this.settings;
				if(!(__map_reserved[currentSection] != null ? _this.existsReserved(currentSection) : _this.h.hasOwnProperty(currentSection))) {
					var v = new haxe_ds_StringMap();
					var _this1 = this.settings;
					if(__map_reserved[currentSection] != null) {
						_this1.setReserved(currentSection,v);
					} else {
						_this1.h[currentSection] = v;
					}
				}
				var _this2 = this.settings;
				var this1 = __map_reserved[currentSection] != null ? _this2.getReserved(currentSection) : _this2.h[currentSection];
				var k = hxconf_ConfigFile.def.matched(1);
				var v1 = hxconf_ConfigFile.def.matched(2);
				var _this3 = this1;
				if(__map_reserved[k] != null) {
					_this3.setReserved(k,v1);
				} else {
					_this3.h[k] = v1;
				}
				lastDef = hxconf_ConfigFile.def.matched(1);
			} else {
				if(lastDef == null) {
					throw new js__$Boot_HaxeError("Config formatting error");
				}
				var _g1 = lastDef;
				var _this4 = this.settings;
				var _g2 = __map_reserved[currentSection] != null ? _this4.getReserved(currentSection) : _this4.h[currentSection];
				var v2 = (__map_reserved[_g1] != null ? _g2.getReserved(_g1) : _g2.h[_g1]) + (" " + line);
				if(__map_reserved[_g1] != null) {
					_g2.setReserved(_g1,v2);
				} else {
					_g2.h[_g1] = v2;
				}
			}
		}
	}
	,getAll: function(section) {
		var _this = this.settings;
		if(__map_reserved[section] != null) {
			return _this.getReserved(section);
		} else {
			return _this.h[section];
		}
	}
	,__class__: hxconf_ConfigFile
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_ChildProcess = require("child_process");
var js_node_Crypto = require("crypto");
var js_node_Fs = require("fs");
var js_node_Os = require("os");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
Engine.extensionsToSearch = ["cue","m3u","zip"];
Engine.file_config = "config.ini";
Engine.MEDNAFEN_EXE = "mednafen.exe";
Engine.PSIMO_EXE = "PFM.exe";
Main.WIDTH = 80;
Main.HEIGHT = 25;
Main.STATUS_POPUP_TIME = 3000;
djNode_Keycode.CTRLC = "\x03";
djNode_Keyboard.FLAG_CAN_BREAK = true;
djNode_Terminal.DEFAULT_LINE_WIDTH = 50;
djNode_Terminal.DEFAULT_LINE_SYMBOL = "-";
djNode_tools_LOG._isInited = false;
djNode_tools_LOG.logLevel = 0;
djNode_tools_LOG.flag_realtime_file = true;
djNode_tools_LOG.flag_socket_log = false;
djNode_tools_LOG.flag_keep_in_memory = true;
djNode_tools_LOG.param_memory_buffer = 8192;
djTui_BaseElement.UID_GEN = 1;
djTui_WM.backgroundColor = "black";
djTui_WM._isInited = false;
djTui_Window.windowAnimationTick = 90;
djTui_el_Button.SMB = ["[]","{}","()","<>"];
djTui_el_Button.CONF_DEF = "Are you sure?";
djTui_el_ScrollBar.SYMBOL_BAR = "│";
djTui_el_ScrollBar.SYMBOL_IND = "█";
djTui_win_MessageBox.BUTTON_STYLE = 1;
djTui_win_MessageBox.FOCUS_LAST = false;
hxconf_ConfigFile.comment = new EReg("^#.*","");
hxconf_ConfigFile.section = new EReg("^\\[([^\\]]+)\\]","");
hxconf_ConfigFile.def = new EReg("^([^:=]+)[:=](.*)","");
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
